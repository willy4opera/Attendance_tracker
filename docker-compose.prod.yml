version: '3.8'

services:
  postgres:
    extends:
      file: docker-compose.yml
      service: postgres
    environment:
      POSTGRES_DB: attendance_tracker_prod
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  redis:
    extends:
      file: docker-compose.yml
      service: redis
    volumes:
      - redis_prod_data:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  backend:
    extends:
      file: docker-compose.yml
      service: backend
    container_name: attendance_backend_prod
    environment:
      NODE_ENV: production
      DB_NAME: attendance_tracker_prod
    ports:
      - "5000:5000"
    networks:
      - app-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  frontend:
    extends:
      file: docker-compose.yml
      service: frontend
    container_name: attendance_frontend_prod
    ports:
      - "80:80"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Production nginx load balancer
  nginx-lb:
    extends:
      file: docker-compose.yml
      service: nginx-lb
    networks:
      - app-network
    profiles: [] # Remove profile restriction for production

volumes:
  postgres_prod_data:
  redis_prod_data:

networks:
  app-network:
    driver: bridge
    name: attendance_prod_network
