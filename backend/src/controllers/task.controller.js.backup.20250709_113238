const { Task, TaskList, User, Board, TaskComment, TaskActivity, TaskWatcher } = require('../models');
const { Op } = require('sequelize');
const logger = require('../utils/logger');

class TaskController {
  // Create task
  async createTask(req, res) {
    try {
      const {
        title,
        description,
        taskListId,
        position = 0,
        priority = 'medium',
        assignedTo = [],
        dueDate,
        labels = [],
        checklist = []
      } = req.body;

      if (!title || !taskListId) {
        return res.status(400).json({
          success: false,
          message: 'Title and task list ID are required'
        });
      }

      // Verify task list exists
      const taskList = await TaskList.findByPk(taskListId);
      if (!taskList) {
        return res.status(404).json({
          success: false,
          message: 'Task list not found'
        });
      }

      const task = await Task.create({
        title,
        description,
        taskListId,
        position,
        createdBy: req.user.id,
        priority,
        assignedTo,
        dueDate,
        labels,
        checklist
      });

      // Auto-watch the task for the creator
      await TaskWatcher.create({
        taskId: task.id,
        userId: req.user.id,
        isWatching: true
      });

      // Create activity log
      await TaskActivity.create({
        taskId: task.id,
        boardId: taskList.boardId,
        userId: req.user.id,
        activityType: 'created',
        description: `Created task "${title}"`,
        metadata: { taskId: task.id }
      });

      const fullTask = await Task.findByPk(task.id, {
        include: [
          {
            model: User,
            as: 'creator',
            attributes: ['id', 'firstName', 'lastName', 'email']
          },
          {
            model: TaskList,
            as: 'list',
            attributes: ['id', 'name']
          }
        ]
      });

      logger.info(`Task created: ${title} by user ${req.user.id}`);

      res.status(201).json({
        success: true,
        message: 'Task created successfully',
        data: fullTask
      });
    } catch (error) {
      logger.error('Error creating task:', error);
      res.status(500).json({
        success: false,
        message: 'Error creating task',
        error: error.message
      });
    }
  }

  // Get task by ID
  async getTaskById(req, res) {
    try {
      const { id } = req.params;

      const task = await Task.findByPk(id, {
        include: [
          {
            model: User,
            as: 'creator',
            attributes: ['id', 'firstName', 'lastName', 'email', 'profilePicture']
          },
          {
            model: TaskList,
            as: 'list',
            attributes: ['id', 'name'],
            include: [
              {
                model: Board,
                as: 'board',
                attributes: ['id', 'name']
              }
            ]
          },
          {
            model: User,
            as: 'watchingUsers',
            attributes: ['id', 'firstName', 'lastName', 'email'],
            through: { attributes: ['isWatching'] }
          }
        ]
      });

      if (!task) {
        return res.status(404).json({
          success: false,
          message: 'Task not found'
        });
      }

      res.json({
        success: true,
        data: task
      });
    } catch (error) {
      logger.error('Error fetching task:', error);
      res.status(500).json({
        success: false,
        message: 'Error fetching task',
        error: error.message
      });
    }
  }

  // Update task
  async updateTask(req, res) {
    try {
      const { id } = req.params;
      const updates = req.body;

      const task = await Task.findByPk(id);
      if (!task) {
        return res.status(404).json({
          success: false,
          message: 'Task not found'
        });
      }

      const oldValues = {
        title: task.title,
        description: task.description,
        priority: task.priority,
        status: task.status,
        assignedTo: task.assignedTo
      };

      await task.update(updates);

      // Create activity log for significant changes
      const taskList = await TaskList.findByPk(task.taskListId);
      if (updates.title && updates.title !== oldValues.title) {
        await TaskActivity.create({
          taskId: task.id,
          boardId: taskList.boardId,
          userId: req.user.id,
          activityType: 'updated',
          description: `Changed title from "${oldValues.title}" to "${updates.title}"`,
          metadata: { field: 'title', oldValue: oldValues.title, newValue: updates.title }
        });
      }

      if (updates.status && updates.status !== oldValues.status) {
        await TaskActivity.create({
          taskId: task.id,
          boardId: taskList.boardId,
          userId: req.user.id,
          activityType: 'updated',
          description: `Changed status from "${oldValues.status}" to "${updates.status}"`,
          metadata: { field: 'status', oldValue: oldValues.status, newValue: updates.status }
        });
      }

      const updatedTask = await Task.findByPk(id, {
        include: [
          {
            model: User,
            as: 'creator',
            attributes: ['id', 'firstName', 'lastName', 'email']
          },
          {
            model: TaskList,
            as: 'list',
            attributes: ['id', 'name']
          }
        ]
      });

      res.json({
        success: true,
        message: 'Task updated successfully',
        data: updatedTask
      });
    } catch (error) {
      logger.error('Error updating task:', error);
      res.status(500).json({
        success: false,
        message: 'Error updating task',
        error: error.message
      });
    }
  }

  // Delete task
  async deleteTask(req, res) {
    try {
      const { id } = req.params;

      const task = await Task.findByPk(id);
      if (!task) {
        return res.status(404).json({
          success: false,
          message: 'Task not found'
        });
      }

      // Check permissions
      if (task.createdBy !== req.user.id && req.user.role !== 'admin') {
        return res.status(403).json({
          success: false,
          message: 'You can only delete your own tasks'
        });
      }

      await task.destroy();

      res.json({
        success: true,
        message: 'Task deleted successfully'
      });
    } catch (error) {
      logger.error('Error deleting task:', error);
      res.status(500).json({
        success: false,
        message: 'Error deleting task',
        error: error.message
      });
    }
  }

  // Watch/Unwatch task
  async toggleWatchTask(req, res) {
    try {
      const { id } = req.params;

      const task = await Task.findByPk(id);
      if (!task) {
        return res.status(404).json({
          success: false,
          message: 'Task not found'
        });
      }

      const existingWatcher = await TaskWatcher.findOne({
        where: {
          taskId: id,
          userId: req.user.id
        }
      });

      if (existingWatcher) {
        await existingWatcher.update({ isWatching: !existingWatcher.isWatching });
        
        // Update watcher count
        const watcherCount = await TaskWatcher.count({
          where: { taskId: id, isWatching: true }
        });
        await task.update({ watcherCount });

        res.json({
          success: true,
          message: existingWatcher.isWatching ? 'Task watched' : 'Task unwatched',
          data: { watching: existingWatcher.isWatching }
        });
      } else {
        await TaskWatcher.create({
          taskId: id,
          userId: req.user.id,
          isWatching: true
        });

        await task.increment('watcherCount');

        res.json({
          success: true,
          message: 'Task watched',
          data: { watching: true }
        });
      }
    } catch (error) {
      logger.error('Error toggling task watch:', error);
      res.status(500).json({
        success: false,
        message: 'Error toggling task watch',
        error: error.message
      });
    }
  }

  // Get tasks for a list
  async getListTasks(req, res) {
    try {
      const { listId } = req.params;
      const { page = 1, limit = 50 } = req.query;
      const offset = (page - 1) * limit;

      const tasks = await Task.findAndCountAll({
        where: { 
          taskListId: listId,
          isArchived: false 
        },
        include: [
          {
            model: User,
            as: 'creator',
            attributes: ['id', 'firstName', 'lastName', 'email']
          }
        ],
        order: [['position', 'ASC']],
        limit: parseInt(limit),
        offset
      });

      res.json({
        success: true,
        data: {
          tasks: tasks.rows,
          total: tasks.count,
          page: parseInt(page),
          totalPages: Math.ceil(tasks.count / limit)
        }
      });
    } catch (error) {
      logger.error('Error fetching list tasks:', error);
      res.status(500).json({
        success: false,
        message: 'Error fetching list tasks',
        error: error.message
      });
    }
  }
}

module.exports = new TaskController();
