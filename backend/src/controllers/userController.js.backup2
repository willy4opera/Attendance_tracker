const { User, Session, Attendance, sequelize } = require('../models');
const bcrypt = require('bcryptjs');
const AppError = require('../utils/appError');
const catchAsync = require('../utils/catchAsync');
const { Op } = require('sequelize');

// Helper function to filter object fields
const filterObj = (obj, ...allowedFields) => {
  const newObj = {};
  Object.keys(obj).forEach(el => {
    if (allowedFields.includes(el)) newObj[el] = obj[el];
  });
  return newObj;
};

// Get user profile (own profile)
exports.getMe = catchAsync(async (req, res, next) => {
  const user = await User.findByPk(req.user.id, {
    attributes: { exclude: ['password', 'resetPasswordToken', 'resetPasswordExpires'] }
  });

  if (!user) {
    return next(new AppError('User not found', 404));
  }

  res.status(200).json({
    status: 'success',
    data: {
      user
    }
  });
});

// Update user profile (own profile)
exports.updateMe = catchAsync(async (req, res, next) => {
  // 1) Create error if user POSTs password data
  if (req.body.password || req.body.passwordConfirm) {
    return next(new AppError('This route is not for password updates. Please use /updatePassword', 400));
  }

  // 2) Filter out unwanted fields that are not allowed to be updated
  const filteredBody = filterObj(
    req.body, 
    'firstName', 
    'lastName', 
    'phoneNumber', 
    'department', 
    'employeeId',
    'metadata'
  );

  // 3) Update user document
  const [updatedRows, [updatedUser]] = await User.update(filteredBody, {
    where: { id: req.user.id },
    returning: true,
    individualHooks: true
  });

  if (updatedRows === 0) {
    return next(new AppError('User not found', 404));
  }

  // Remove password from output
  updatedUser.password = undefined;

  res.status(200).json({
    status: 'success',
    data: {
      user: updatedUser
    }
  });
});

// Delete user account (soft delete - deactivate)
exports.deleteMe = catchAsync(async (req, res, next) => {
  await User.update(
    { isActive: false },
    { where: { id: req.user.id } }
  );

  res.status(204).json({
    status: 'success',
    data: null
  });
});

// ADMIN ONLY ENDPOINTS

// Get all users (with pagination and filtering)
exports.getAllUsers = catchAsync(async (req, res, next) => {
  // Check if user is admin
  if (req.user.role !== 'admin') {
    return next(new AppError('You do not have permission to perform this action', 403));
  }

  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const offset = (page - 1) * limit;

  // Build filter conditions
  const where = {};
  
  if (req.query.role) {
    where.role = req.query.role;
  }
  
  if (req.query.isActive !== undefined) {
    where.isActive = req.query.isActive === 'true';
  }
  
  if (req.query.search) {
    where[Op.or] = [
      { firstName: { [Op.iLike]: `%${req.query.search}%` } },
      { lastName: { [Op.iLike]: `%${req.query.search}%` } },
      { email: { [Op.iLike]: `%${req.query.search}%` } }
    ];
  }

  const { count, rows: users } = await User.findAndCountAll({
    where,
    attributes: { exclude: ['password', 'resetPasswordToken', 'resetPasswordExpires'] },
    limit,
    offset,
    order: [['createdAt', 'DESC']]
  });

  res.status(200).json({
    status: 'success',
    results: users.length,
    pagination: {
      page,
      limit,
      totalPages: Math.ceil(count / limit),
      totalResults: count
    },
    data: {
      users
    }
  });
});

// Get single user by ID (admin only)
exports.getUser = catchAsync(async (req, res, next) => {
  if (req.user.role !== 'admin') {
    return next(new AppError('You do not have permission to perform this action', 403));
  }

  const user = await User.findByPk(req.params.id, {
    attributes: { exclude: ['password', 'resetPasswordToken', 'resetPasswordExpires'] }
  });

  if (!user) {
    return next(new AppError('No user found with that ID', 404));
  }

  res.status(200).json({
    status: 'success',
    data: {
      user
    }
  });
});

// Update user (admin only)
exports.updateUser = catchAsync(async (req, res, next) => {
  if (req.user.role !== 'admin') {
    return next(new AppError('You do not have permission to perform this action', 403));
  }

  // Admin can update more fields including role and isActive
  const filteredBody = filterObj(
    req.body,
    'firstName',
    'lastName',
    'email',
    'phoneNumber',
    'department',
    'employeeId',
    'role',
    'isActive',
    'metadata'
  );

  const [updatedRows, [updatedUser]] = await User.update(filteredBody, {
    where: { id: req.params.id },
    returning: true,
    individualHooks: true
  });

  if (updatedRows === 0) {
    return next(new AppError('No user found with that ID', 404));
  }

  // Remove password from output
  updatedUser.password = undefined;

  res.status(200).json({
    status: 'success',
    data: {
      user: updatedUser
    }
  });
});

// Delete user (admin only - hard delete)
exports.deleteUser = catchAsync(async (req, res, next) => {
  if (req.user.role !== 'admin') {
    return next(new AppError('You do not have permission to perform this action', 403));
  }

  const deletedRows = await User.destroy({
    where: { id: req.params.id }
  });

  if (deletedRows === 0) {
    return next(new AppError('No user found with that ID', 404));
  }

  res.status(204).json({
    status: 'success',
    data: null
  });
});

// Activate/Deactivate user (admin only)
exports.toggleUserStatus = catchAsync(async (req, res, next) => {
  if (req.user.role !== 'admin') {
    return next(new AppError('You do not have permission to perform this action', 403));
  }

  const user = await User.findByPk(req.params.id);
  
  if (!user) {
    return next(new AppError('No user found with that ID', 404));
  }

  user.isActive = !user.isActive;
  await user.save();

  // Remove password from output
  user.password = undefined;

  res.status(200).json({
    status: 'success',
    message: `User ${user.isActive ? 'activated' : 'deactivated'} successfully`,
    data: {
      user
    }
  });
});

// Get user statistics (admin only)
exports.getUserStats = catchAsync(async (req, res, next) => {
  if (req.user.role !== 'admin') {
    return next(new AppError('You do not have permission to perform this action', 403));
  }

  const totalUsers = await User.count();
  const activeUsers = await User.count({ where: { isActive: true } });
  const usersByRole = await User.findAll({
    attributes: [
      'role',
      [User.sequelize.fn('COUNT', User.sequelize.col('role')), 'count']
    ],
    group: ['role']
  });

  const recentUsers = await User.findAll({
    where: {
      createdAt: {
        [Op.gte]: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days
      }
    },
    attributes: { exclude: ['password', 'resetPasswordToken', 'resetPasswordExpires'] },
    order: [['createdAt', 'DESC']],
    limit: 5
  });

  res.status(200).json({
    status: 'success',
    data: {
      stats: {
        totalUsers,
        activeUsers,
        inactiveUsers: totalUsers - activeUsers,
        usersByRole: usersByRole.reduce((acc, role) => {
          acc[role.role] = parseInt(role.dataValues.count);
          return acc;
        }, {})
      },
      recentUsers
    }
  });
});

// Get user's dashboard statistics (accessible to all authenticated users for their own data)
// Get user's dashboard statistics (accessible to all authenticated users for their own data)
// Get user's dashboard statistics (accessible to all authenticated users for their own data)
// Get user's dashboard statistics (accessible to all authenticated users for their own data)
// Get user's dashboard statistics (accessible to all authenticated users for their own data)
exports.getUserDashboardStats = catchAsync(async (req, res, next) => {
  const userId = req.user.id;
  
  try {
    // Get attendance statistics for the user
    const attendanceStats = await Attendance.findOne({
      where: { userId },
      attributes: [
        [sequelize.fn('COUNT', sequelize.col('id')), 'totalAttendance'],
        [sequelize.fn('SUM', sequelize.literal("CASE WHEN status = 'present' THEN 1 ELSE 0 END")), 'presentCount'],
        [sequelize.fn('SUM', sequelize.literal("CASE WHEN status = 'absent' THEN 1 ELSE 0 END")), 'absentCount'],
        [sequelize.fn('SUM', sequelize.literal("CASE WHEN status = 'late' THEN 1 ELSE 0 END")), 'lateCount']
      ],
      raw: true
    });

    // Get distinct sessions count for the user
    const sessionCount = await Attendance.count({
      where: { userId },
      distinct: true,
      col: 'sessionId'
    });

    // Get upcoming sessions
    const upcomingSessions = await Session.count({
      where: {
        startTime: {
          [Op.gte]: new Date()
        }
      }
    });

    // Get recent attendance records
    const recentAttendance = await Attendance.findAll({
      where: { 
        userId,
        checkInTime: {
          [Op.gte]: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
        }
      },
      attributes: ['id', 'status', 'checkInTime', 'sessionId'],
      limit: 5,
      order: [['checkInTime', 'DESC']],
      raw: true
    });

    // Get session details for recent attendance
    const sessionIds = recentAttendance.map(a => a.sessionId).filter(id => id);
    let sessionsMap = {};
    
    if (sessionIds.length > 0) {
      const sessions = await Session.findAll({
        where: { id: sessionIds },
        attributes: ['id', 'title', 'startTime'],
        raw: true
      });
      
      sessionsMap = sessions.reduce((acc, session) => {
        acc[session.id] = session;
        return acc;
      }, {});
    }

    const recentAttendanceWithSessions = recentAttendance.map(att => ({
      id: att.id,
      status: att.status,
      checkInTime: att.checkInTime,
      session: sessionsMap[att.sessionId] || null
    }));

    // Calculate stats
    const stats = {
      totalSessions: sessionCount || 0,
      sessionsAttended: parseInt(attendanceStats?.presentCount || 0),
      presentCount: parseInt(attendanceStats?.presentCount || 0),
      absentCount: parseInt(attendanceStats?.absentCount || 0),
      lateCount: parseInt(attendanceStats?.lateCount || 0),
      attendanceRate: sessionCount > 0 
        ? Math.round((parseInt(attendanceStats?.presentCount || 0) / sessionCount) * 100)
        : 0,
      upcomingSessions
    };

    // Get role-specific stats
    let roleSpecificStats = {};
    
    if (req.user.role === 'admin') {
      const userCounts = await User.findOne({
        attributes: [
          [sequelize.fn('COUNT', sequelize.col('id')), 'totalUsers'],
          [sequelize.fn('SUM', sequelize.literal("CASE WHEN is_active = true THEN 1 ELSE 0 END")), 'activeUsers'],
          [sequelize.fn('SUM', sequelize.literal("CASE WHEN email_verified = true THEN 1 ELSE 0 END")), 'verifiedUsers']
        ],
        raw: true
      });

      const totalSystemSessions = await Session.count();
      const ongoingSessions = await Session.count({
        where: {
          startTime: { [Op.lte]: new Date() },
          endTime: { [Op.gte]: new Date() }
        }
      });

      roleSpecificStats = {
        totalUsers: parseInt(userCounts?.totalUsers || 0),
        activeUsers: parseInt(userCounts?.activeUsers || 0),
        verifiedUsers: parseInt(userCounts?.verifiedUsers || 0),
        totalSystemSessions,
        ongoingSessions
      };
    } else if (req.user.role === 'moderator') {
      const managedSessions = await Session.count({
        where: { facilitatorId: userId }
      });
      
      const upcomingManagedSessions = await Session.count({
        where: {
          facilitatorId: userId,
          startTime: { [Op.gte]: new Date() }
        }
      });

      roleSpecificStats = {
        managedSessions,
        upcomingManagedSessions
      };
    }

    res.status(200).json({
      status: 'success',
      data: {
        userStats: stats,
        recentAttendance: recentAttendanceWithSessions,
        roleSpecificStats
      }
    });
  } catch (error) {
    console.error('Dashboard stats error:', error);
    return next(new AppError('Failed to fetch dashboard statistics', 500));
  }
});
