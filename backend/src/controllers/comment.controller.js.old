const { TaskComment, CommentLike, User, Task } = require('../models');
const { Op } = require('sequelize');
const logger = require('../utils/logger');

class CommentController {
  // Create a comment
  async createComment(req, res) {
    try {
      const { taskId, content, parentId, mentions } = req.body;

      if (!taskId || !content) {
        return res.status(400).json({
          success: false,
          message: 'Task ID and content are required'
        });
      }

      const comment = await TaskComment.create({
        taskId,
        userId: req.user.id,
        content,
        parentId: parentId || null,
        mentions: mentions || []
      });

      const fullComment = await TaskComment.findByPk(comment.id, {
        include: [
          {
            model: User,
            as: 'user',
            attributes: ['id', 'firstName', 'lastName', 'email', 'profilePicture']
          },
          {
            model: TaskComment,
            as: 'replies',
            include: [
              {
                model: User,
                as: 'user',
                attributes: ['id', 'firstName', 'lastName', 'email', 'profilePicture']
              }
            ]
          }
        ]
      });

      // Update task comment count
      await Task.increment('commentCount', { where: { id: taskId } });

      logger.info(`Comment created on task ${taskId} by user ${req.user.id}`);

      res.status(201).json({
        success: true,
        message: 'Comment created successfully',
        data: fullComment
      });
    } catch (error) {
      logger.error('Error creating comment:', error);
      res.status(500).json({
        success: false,
        message: 'Error creating comment',
        error: error.message
      });
    }
  }

  // Get comments for a task
  async getTaskComments(req, res) {
    try {
      const { taskId } = req.params;
      const { page = 1, limit = 20 } = req.query;

      const offset = (page - 1) * limit;

      const comments = await TaskComment.findAndCountAll({
        where: { 
          taskId,
          parentId: null // Only get top-level comments
        },
        include: [
          {
            model: User,
            as: 'user',
            attributes: ['id', 'firstName', 'lastName', 'email', 'profilePicture']
          },
          {
            model: TaskComment,
            as: 'replies',
            include: [
              {
                model: User,
                as: 'user',
                attributes: ['id', 'firstName', 'lastName', 'email', 'profilePicture']
              }
            ]
          },
          {
            model: CommentLike,
            as: 'likes',
            include: [
              {
                model: User,
                as: 'user',
                attributes: ['id', 'firstName', 'lastName']
              }
            ]
          }
        ],
        order: [['createdAt', 'DESC']],
        limit: parseInt(limit),
        offset
      });

      res.json({
        success: true,
        data: {
          comments: comments.rows,
          total: comments.count,
          page: parseInt(page),
          totalPages: Math.ceil(comments.count / limit)
        }
      });
    } catch (error) {
      logger.error('Error fetching comments:', error);
      res.status(500).json({
        success: false,
        message: 'Error fetching comments',
        error: error.message
      });
    }
  }

  // Like/Unlike a comment
  async toggleCommentLike(req, res) {
    try {
      const { commentId } = req.params;
      const { reactionType = 'like' } = req.body;

      const comment = await TaskComment.findByPk(commentId);
      if (!comment) {
        return res.status(404).json({
          success: false,
          message: 'Comment not found'
        });
      }

      // Check if user already liked this comment
      const existingLike = await CommentLike.findOne({
        where: {
          commentId,
          userId: req.user.id
        }
      });

      if (existingLike) {
        // Remove like
        await existingLike.destroy();
        await comment.decrement('likeCount');
        
        // Update reaction summary
        const reactionSummary = comment.reactionSummary || {};
        if (reactionSummary[existingLike.reactionType]) {
          reactionSummary[existingLike.reactionType]--;
          if (reactionSummary[existingLike.reactionType] <= 0) {
            delete reactionSummary[existingLike.reactionType];
          }
        }
        await comment.update({ reactionSummary });

        res.json({
          success: true,
          message: 'Like removed',
          data: { liked: false, likeCount: comment.likeCount }
        });
      } else {
        // Add like
        await CommentLike.create({
          commentId,
          userId: req.user.id,
          reactionType
        });
        await comment.increment('likeCount');

        // Update reaction summary
        const reactionSummary = comment.reactionSummary || {};
        reactionSummary[reactionType] = (reactionSummary[reactionType] || 0) + 1;
        await comment.update({ reactionSummary });

        res.json({
          success: true,
          message: 'Like added',
          data: { liked: true, likeCount: comment.likeCount + 1 }
        });
      }

      logger.info(`Comment ${commentId} ${existingLike ? 'unliked' : 'liked'} by user ${req.user.id}`);
    } catch (error) {
      logger.error('Error toggling comment like:', error);
      res.status(500).json({
        success: false,
        message: 'Error toggling comment like',
        error: error.message
      });
    }
  }

  // Update comment
  async updateComment(req, res) {
    try {
      const { commentId } = req.params;
      const { content } = req.body;

      const comment = await TaskComment.findByPk(commentId);
      if (!comment) {
        return res.status(404).json({
          success: false,
          message: 'Comment not found'
        });
      }

      // Check if user owns the comment
      if (comment.userId !== req.user.id) {
        return res.status(403).json({
          success: false,
          message: 'You can only edit your own comments'
        });
      }

      await comment.update({
        content,
        isEdited: true,
        editedAt: new Date()
      });

      const updatedComment = await TaskComment.findByPk(commentId, {
        include: [
          {
            model: User,
            as: 'user',
            attributes: ['id', 'firstName', 'lastName', 'email', 'profilePicture']
          }
        ]
      });

      res.json({
        success: true,
        message: 'Comment updated successfully',
        data: updatedComment
      });
    } catch (error) {
      logger.error('Error updating comment:', error);
      res.status(500).json({
        success: false,
        message: 'Error updating comment',
        error: error.message
      });
    }
  }

  // Delete comment
  async deleteComment(req, res) {
    try {
      const { commentId } = req.params;

      const comment = await TaskComment.findByPk(commentId);
      if (!comment) {
        return res.status(404).json({
          success: false,
          message: 'Comment not found'
        });
      }

      // Check if user owns the comment or has admin rights
      if (comment.userId !== req.user.id && req.user.role !== 'admin') {
        return res.status(403).json({
          success: false,
          message: 'You can only delete your own comments'
        });
      }

      await comment.destroy();

      // Update task comment count
      await Task.decrement('commentCount', { where: { id: comment.taskId } });

      res.json({
        success: true,
        message: 'Comment deleted successfully'
      });
    } catch (error) {
      logger.error('Error deleting comment:', error);
      res.status(500).json({
        success: false,
        message: 'Error deleting comment',
        error: error.message
      });
    }
  }
}

  // Generate shareable link
  generateShareableLink(commentId, taskId) {
    const baseUrl = process.env.FRONTEND_URL || "http://localhost:3000";
    return `${baseUrl}/tasks/${taskId}?comment=${commentId}`;
  }
module.exports = new CommentController();

