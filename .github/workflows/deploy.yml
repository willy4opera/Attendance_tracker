name: Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Select deployment type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - migrations_only
          - frontend_only
          - backend_only

env:
  DEPLOY_PATH: /var/www/html/Attendance_tracker
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 77.37.121.27 >> ~/.ssh/known_hosts

      - name: Setup Project Directory
        run: |
          echo "✨ Setting up project directory..."
          ssh root@77.37.121.27 "
            if [ ! -d '${{ env.DEPLOY_PATH }}' ]; then
              mkdir -p '${{ env.DEPLOY_PATH }}'
              cd /var/www/html
              git clone '${{ env.REPO_URL }}.git' Attendance_tracker
              chown -R root:root '${{ env.DEPLOY_PATH }}'
              chmod -R 755 '${{ env.DEPLOY_PATH }}'
            else
              cd '${{ env.DEPLOY_PATH }}'
              CURRENT_REMOTE=\$(git config --get remote.origin.url 2>/dev/null || echo 'none')
              EXPECTED_REMOTE='${{ env.REPO_URL }}.git'
              if [ \"\$CURRENT_REMOTE\" != \"\$EXPECTED_REMOTE\" ]; then
                git remote set-url origin \"\$EXPECTED_REMOTE\" 2>/dev/null || git remote add origin \"\$EXPECTED_REMOTE\"
              fi
            fi
          "

      - name: Setup Upload Directories
        run: |
          echo "📁 Creating required upload directories..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}' &&
            echo '📁 Creating all required upload directories...' &&
            mkdir -p backend/uploads/{temp,files,images,videos,documents,avatars,attachments,debug,qrcodes} &&
            chmod -R 755 backend/uploads &&
            echo '📋 Directory structure:' &&
            ls -la backend/uploads/ &&
            echo '✅ All upload directories created successfully'
          "

      - name: Create Environment Files
        run: |
          echo "🔧 Creating environment files..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}'
            # Create docker-compose .env file with proper quoting
            {
              printf 'DB_NAME=\"%s\"\n' '${{ secrets.DB_NAME }}'
              printf 'DB_USER=\"%s\"\n' '${{ secrets.DB_USER }}'
              printf 'DB_PASSWORD=\"%s\"\n' '${{ secrets.DB_PASSWORD }}'
              printf 'JWT_SECRET=\"%s\"\n' '${{ secrets.JWT_SECRET }}'
              printf 'JWT_REFRESH_SECRET=\"%s\"\n' '${{ secrets.JWT_REFRESH_SECRET }}'
              printf 'REFRESH_TOKEN_SECRET=\"%s\"\n' '${{ secrets.REFRESH_TOKEN_SECRET }}'
              printf 'EMAIL_HOST=\"%s\"\n' '${{ secrets.EMAIL_HOST }}'
              printf 'EMAIL_PORT=\"%s\"\n' '${{ secrets.EMAIL_PORT }}'
              printf 'EMAIL_SECURE=\"%s\"\n' '${{ secrets.EMAIL_SECURE }}'
              printf 'EMAIL_USER=\"%s\"\n' '${{ secrets.EMAIL_USER }}'
              printf 'EMAIL_PASS=\"%s\"\n' '${{ secrets.EMAIL_PASS }}'
              printf 'EMAIL_FROM=\"%s\"\n' '${{ secrets.EMAIL_FROM }}'
              printf 'GOOGLE_CLIENT_ID=\"%s\"\n' '${{ secrets.GOOGLE_CLIENT_ID }}'
              printf 'GOOGLE_CLIENT_SECRET=\"%s\"\n' '${{ secrets.GOOGLE_CLIENT_SECRET }}'
              printf 'YOUTUBE_CLIENT_ID=\"%s\"\n' '${{ secrets.YOUTUBE_CLIENT_ID }}'
              printf 'YOUTUBE_CLIENT_SECRET=\"%s\"\n' '${{ secrets.YOUTUBE_CLIENT_SECRET }}'
              printf 'YOUTUBE_API_KEY=\"%s\"\n' '${{ secrets.YOUTUBE_API_KEY }}'
              printf 'FACEBOOK_APP_ID=\"%s\"\n' '${{ secrets.FACEBOOK_APP_ID }}'
              printf 'FACEBOOK_APP_SECRET=\"%s\"\n' '${{ secrets.FACEBOOK_APP_SECRET }}'
              printf 'GITHUB_CLIENT_ID=\"%s\"\n' '${{ secrets.GITHUB_CLIENT_ID }}'
              printf 'GITHUB_CLIENT_SECRET=\"%s\"\n' '${{ secrets.GITHUB_CLIENT_SECRET }}'
              printf 'LINKEDIN_CLIENT_ID=\"%s\"\n' '${{ secrets.LINKEDIN_CLIENT_ID }}'
              printf 'LINKEDIN_CLIENT_SECRET=\"%s\"\n' '${{ secrets.LINKEDIN_CLIENT_SECRET }}'
              printf 'CLOUDINARY_CLOUD_NAME=\"%s\"\n' '${{ secrets.CLOUDINARY_CLOUD_NAME }}'
              printf 'CLOUDINARY_API_KEY=\"%s\"\n' '${{ secrets.CLOUDINARY_API_KEY }}'
              printf 'CLOUDINARY_API_SECRET=\"%s\"\n' '${{ secrets.CLOUDINARY_API_SECRET }}'
            } > .env
            chmod 600 .env

            # Create backend .env file
            echo 'NODE_ENV=production' > backend/.env
            echo 'PORT=5000' >> backend/.env
            echo 'DB_HOST=localhost' >> backend/.env
            echo 'DB_PORT=5432' >> backend/.env
            echo 'DB_NAME=${{ secrets.DB_NAME }}' >> backend/.env
            echo 'DB_USER=${{ secrets.DB_USER }}' >> backend/.env
            echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> backend/.env
            echo 'DB_DIALECT=postgres' >> backend/.env
            echo 'REDIS_HOST=localhost' >> backend/.env
            echo 'REDIS_PORT=6379' >> backend/.env
            echo 'REDIS_URL=redis://localhost:6379' >> backend/.env
            echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> backend/.env
            echo 'JWT_EXPIRES_IN=24h' >> backend/.env
            echo 'REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}' >> backend/.env
            echo 'JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}' >> backend/.env
            echo 'EMAIL_HOST=${{ secrets.EMAIL_HOST }}' >> backend/.env
            echo 'EMAIL_PORT=${{ secrets.EMAIL_PORT }}' >> backend/.env
            echo 'EMAIL_SECURE=${{ secrets.EMAIL_SECURE }}' >> backend/.env
            echo 'EMAIL_USER=${{ secrets.EMAIL_USER }}' >> backend/.env
            echo 'EMAIL_PASS=${{ secrets.EMAIL_PASS }}' >> backend/.env
            echo 'EMAIL_FROM=${{ secrets.EMAIL_FROM }}' >> backend/.env
            echo 'COMPANY_NAME=Change Ambassadors' >> backend/.env
            echo 'COMPANY_ADDRESS=Kampala, Uganda' >> backend/.env
            echo 'SUPPORT_EMAIL=support@changeambassadors.com' >> backend/.env
            echo 'YOUTUBE_CLIENT_ID=${{ secrets.YOUTUBE_CLIENT_ID }}' >> backend/.env
            echo 'YOUTUBE_CLIENT_SECRET=${{ secrets.YOUTUBE_CLIENT_SECRET }}' >> backend/.env
            echo 'YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}' >> backend/.env
            echo 'YOUTUBE_REDIRECT_URI=https://syncli.cloud/api/v1/auth/youtube/callback' >> backend/.env
            echo 'MAX_VIDEO_SIZE=134217728' >> backend/.env
            echo 'MAX_FILE_SIZE=10485760' >> backend/.env
            echo 'TEMP_UPLOAD_DIR=/tmp/video-uploads' >> backend/.env
            echo 'UPLOAD_DIR=./uploads' >> backend/.env
            echo 'CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}' >> backend/.env
            echo 'CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}' >> backend/.env
            echo 'CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}' >> backend/.env
            echo 'FRONTEND_URL=https://syncli.cloud' >> backend/.env
            echo 'GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}' >> backend/.env
            echo 'GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}' >> backend/.env
            echo 'GOOGLE_REDIRECT_URI=https://syncli.cloud/register' >> backend/.env
            echo 'FACEBOOK_APP_ID=${{ secrets.FACEBOOK_APP_ID }}' >> backend/.env
            echo 'FACEBOOK_APP_SECRET=${{ secrets.FACEBOOK_APP_SECRET }}' >> backend/.env
            echo 'FACEBOOK_REDIRECT_URI=https://syncli.cloud/register' >> backend/.env
            echo 'LINKEDIN_CLIENT_ID=${{ secrets.LINKEDIN_CLIENT_ID }}' >> backend/.env
            echo 'LINKEDIN_CLIENT_SECRET=${{ secrets.LINKEDIN_CLIENT_SECRET }}' >> backend/.env
            echo 'GITHUB_CLIENT_ID=${{ secrets.GITHUB_CLIENT_ID }}' >> backend/.env
            echo 'GITHUB_CLIENT_SECRET=${{ secrets.GITHUB_CLIENT_SECRET }}' >> backend/.env
            echo 'GITHUB_REDIRECT_URI=https://syncli.cloud/register' >> backend/.env
            echo 'LINKEDIN_REDIRECT_URI=https://syncli.cloud/register' >> backend/.env
            echo 'SESSION_SECRET=${{ secrets.SESSION_SECRET }}' >> backend/.env
            echo 'GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}' >> backend/.env
            echo 'SENTRY_DSN=${{ secrets.SENTRY_DSN }}' >> backend/.env
            
            # Create frontend .env file
            echo 'VITE_API_BASE_URL=/api/v1' > frontend/.env
            echo 'VITE_API_HOST=syncli.cloud' >> frontend/.env
            echo 'VITE_API_PORT=443' >> frontend/.env
            echo 'VITE_API_PROTOCOL=https:' >> frontend/.env
            echo 'VITE_SOCKET_PATH=/socket.io' >> frontend/.env
            echo 'VITE_SOCKET_HOST=syncli.cloud' >> frontend/.env
            echo 'VITE_SOCKET_PORT=443' >> frontend/.env
            echo 'VITE_SOCKET_PROTOCOL=https:' >> frontend/.env
            echo 'VITE_APP_NAME=Attendance Tracker' >> frontend/.env
            echo 'VITE_APP_VERSION=1.0.0' >> frontend/.env
            echo 'VITE_ENABLE_SOCKET_IO=true' >> frontend/.env
            echo 'VITE_ENABLE_NOTIFICATIONS=true' >> frontend/.env
            echo 'VITE_SESSION_TIMEOUT=3600000' >> frontend/.env
            echo 'VITE_USE_PROXY=false' >> frontend/.env
            echo 'VITE_THEME_COLOR_PRIMARY=#fddc9a' >> frontend/.env
            echo 'VITE_THEME_COLOR_SECONDARY=#000000' >> frontend/.env
            echo 'VITE_THEME_COLOR_SUCCESS=#4caf50' >> frontend/.env
            echo 'VITE_THEME_COLOR_ERROR=#f44336' >> frontend/.env
            echo 'VITE_THEME_COLOR_WARNING=#ff9800' >> frontend/.env
            echo 'VITE_THEME_COLOR_INFO=#2196f3' >> frontend/.env
            echo 'VITE_THEME_BG_DEFAULT=#f5f5f5' >> frontend/.env
            echo 'VITE_THEME_BG_PAPER=#ffffff' >> frontend/.env
            echo 'VITE_THEME_TEXT_PRIMARY=#000000' >> frontend/.env
            echo 'VITE_THEME_TEXT_SECONDARY=#757575' >> frontend/.env
            echo 'VITE_GOOGLE_REDIRECT_URI=https://syncli.cloud/register' >> frontend/.env
            echo 'VITE_FACEBOOK_REDIRECT_URI=https://syncli.cloud/register' >> frontend/.env
            echo 'VITE_GITHUB_REDIRECT_URI=https://syncli.cloud/register' >> frontend/.env
            echo 'VITE_LINKEDIN_REDIRECT_URI=https://syncli.cloud/register' >> frontend/.env
            
            # Set permissions
            chmod 600 backend/.env frontend/.env
            echo '✅ Environment files created successfully'
            ls -la .env backend/.env frontend/.env
          "

      - name: Run Pre-deployment Checks
        run: |
          echo "🔍 Running pre-deployment checks..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}' &&
            echo '📋 Checking project structure...' &&
            [ -f docker-compose.prod.yml ] && echo '✅ docker-compose.prod.yml found' || { echo '❌ docker-compose.prod.yml not found'; exit 1; } &&
            echo '📋 Checking environment file...' &&
            [ -f .env ] && echo '✅ .env file exists' || { echo '❌ .env file missing'; exit 1; } &&
            echo '📋 Checking PostgreSQL system service...' &&
            systemctl is-active --quiet postgresql && echo '✅ PostgreSQL service is running' || { echo '❌ PostgreSQL service not running'; exit 1; } &&
            echo '📋 Checking PostgreSQL connectivity...' &&
            sudo -u postgres psql -c '\l' | grep -q 'attendance_tracker_pro' && echo '✅ Database exists' || { echo '❌ Database not found'; exit 1; } &&
            echo '📋 Checking Redis system service...' &&
            systemctl is-active --quiet redis-server && echo '✅ Redis service is running' || { echo '❌ Redis service not running'; exit 1; } &&
            echo '📋 Checking Redis connectivity...' &&
            redis-cli ping | grep -q PONG && echo '✅ Redis is responding' || { echo '❌ Redis not responding'; exit 1; } &&
            echo '📋 Checking Docker...' &&
            systemctl is-active --quiet docker && echo '✅ Docker is running' || { echo '❌ Docker not running'; exit 1; } &&
            echo '✅ All pre-deployment checks passed!'
          "

      - name: Deploy Code
        run: |
          echo "🔄 Deploying latest changes..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}' && \
            git stash push -m 'Auto-stash before deployment' || true && \
            git fetch origin ${{ github.ref_name }} && \
            git pull origin ${{ github.ref_name }} && \
            echo '✅ Code deployed successfully'
          "

      - name: Deploy Backend Service
        run: |
          echo "🚀 Deploying backend service (uses host network to connect to system PostgreSQL and Redis)..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}' &&
            echo '📦 Building backend...' &&
            docker-compose -f docker-compose.prod.yml build backend &&
            echo '🔄 Starting backend service...' &&
            docker-compose -f docker-compose.prod.yml up -d backend &&
            echo '✅ Backend service deployed'
          "

      - name: Deploy Frontend Service
        run: |
          echo "🎨 Deploying frontend service on port 5173..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}' &&
            echo '📦 Building frontend...' &&
            docker-compose -f docker-compose.prod.yml build frontend &&
            echo '🔄 Starting frontend service...' &&
            docker-compose -f docker-compose.prod.yml up -d frontend &&
            echo '✅ Frontend service deployed'
          "

      - name: Service Health Check
        run: |
          echo "🔍 Checking service health..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}' &&
            echo '=== Docker Services Status ===' &&
            docker-compose -f docker-compose.prod.yml ps &&
            echo '' &&
            echo '=== System Services Status ===' &&
            echo 'PostgreSQL:' &&
            systemctl is-active postgresql || echo 'PostgreSQL not active' &&
            echo 'Redis:' &&
            systemctl is-active redis-server || echo 'Redis not active' &&
            echo '' &&
            sleep 20 &&
            echo '=== Port Status ===' &&
            echo 'Backend (5001):' &&
            netstat -tlpn | grep :5001 || echo 'Backend not bound on 5001' &&
            echo 'Frontend (5173):' &&
            netstat -tlpn | grep :5173 || echo 'Frontend not bound' &&
            echo 'PostgreSQL (5432):' &&
            netstat -tlpn | grep :5432 || echo 'PostgreSQL not bound' &&
            echo 'Redis (6379):' &&
            netstat -tlpn | grep :6379 || echo 'Redis not bound' &&
            echo '' &&
            echo '=== Direct Service Tests ===' &&
            echo 'Testing Backend:' &&
            curl -f http://localhost:5001/health 2>/dev/null && echo '  Backend Health: ✅' || curl -f http://localhost:5001/ 2>/dev/null && echo '  Backend Root: ✅' || echo '  Backend: ❌' &&
            echo 'Testing Frontend (localhost:5173):' &&
            curl -f http://localhost:5173/ 2>/dev/null && echo '  Frontend: ✅' || echo '  Frontend: ❌' &&
            echo 'Testing PostgreSQL:' &&
            sudo -u postgres psql -c 'SELECT 1;' > /dev/null && echo '  PostgreSQL: ✅' || echo '  PostgreSQL: ❌' &&
            echo 'Testing Redis:' &&
            redis-cli ping | grep -q PONG && echo '  Redis: ✅' || echo '  Redis: ❌' &&
            echo '✅ Health checks completed'
          "

      - name: Final Status
        if: always()
        run: |
          echo "📊 Deployment completed at $(date)"
          echo ""
          echo "🏗️ Architecture:"
          echo "  - System Nginx: Reverse proxy (ports 80/443) → /etc/nginx/conf.d/syncli.cloud.conf"
          echo "  - Backend: Docker container (host network, port 5001)"
          echo "  - Frontend: Docker container (port 5173)"
          echo "  - PostgreSQL: System service (port 5432)"
          echo "  - Redis: System service (port 6379)"
          echo ""
          echo "🌐 Traffic Flow: syncli.cloud → System Nginx → Backend(5001) & Frontend(5173)"
          echo "🔗 Backend connects to: PostgreSQL(localhost:5432) & Redis(localhost:6379)"
          echo ""
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed! Check the logs above."
          fi
