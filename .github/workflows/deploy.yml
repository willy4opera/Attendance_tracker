name: Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Select deployment type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - migrations_only
          - frontend_only
          - backend_only

env:
  DEPLOY_PATH: /var/www/html/Attendance_tracker
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 77.37.121.27 >> ~/.ssh/known_hosts

      - name: Setup Project Directory
        run: |
          echo "✨ Setting up project directory..."
          ssh root@77.37.121.27 "
            if [ ! -d '${{ env.DEPLOY_PATH }}' ]; then
              mkdir -p '${{ env.DEPLOY_PATH }}'
              cd /var/www/html
              git clone '${{ env.REPO_URL }}.git' Attendance_tracker
              chown -R root:root '${{ env.DEPLOY_PATH }}'
              chmod -R 755 '${{ env.DEPLOY_PATH }}'
            else
              cd '${{ env.DEPLOY_PATH }}'
              CURRENT_REMOTE=\$(git config --get remote.origin.url 2>/dev/null || echo 'none')
              EXPECTED_REMOTE='${{ env.REPO_URL }}.git'
              if [ \"\$CURRENT_REMOTE\" != \"\$EXPECTED_REMOTE\" ]; then
                git remote set-url origin \"\$EXPECTED_REMOTE\" 2>/dev/null || git remote add origin \"\$EXPECTED_REMOTE\"
              fi
            fi
          "

      - name: Deploy Code
        run: |
          echo "🔄 Deploying latest changes..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}' && 
            git stash push -m 'Auto-stash before deployment' || true && 
            git fetch origin ${{ github.ref_name }} &&
            git pull origin ${{ github.ref_name }} && 
            echo '✅ Code deployed successfully'
          "

      - name: Create Environment Files
        run: |
          echo "🔧 Creating environment files..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}'
            
            # Create root .env file
            echo 'NODE_ENV=production' > .env
            echo 'PORT=5000' >> .env
            echo 'FRONTEND_PORT=5173' >> .env
            echo 'DB_HOST=host.docker.internal' >> .env
            echo 'DB_PORT=5432' >> .env
            echo 'DB_NAME=${{ secrets.DB_NAME }}' >> .env
            echo 'DB_USER=${{ secrets.DB_USER }}' >> .env
            echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env
            echo 'REDIS_PORT=6380' >> .env
            echo 'VITE_API_URL=https://syncli.cloud/api/v1' >> .env
            echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> .env
            echo 'EMAIL_HOST=${{ secrets.EMAIL_HOST }}' >> .env
            echo 'EMAIL_PORT=${{ secrets.EMAIL_PORT }}' >> .env
            echo 'EMAIL_USER=${{ secrets.EMAIL_USER }}' >> .env
            echo 'EMAIL_PASS=${{ secrets.EMAIL_PASS }}' >> .env
            echo 'CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}' >> .env
            echo 'CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}' >> .env
            echo 'CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}' >> .env
            
            # Create backend .env file
            echo 'NODE_ENV=production' > backend/.env
            echo 'PORT=5000' >> backend/.env
            echo 'DB_HOST=host.docker.internal' >> backend/.env
            echo 'DB_PORT=5432' >> backend/.env
            echo 'DB_NAME=${{ secrets.DB_NAME }}' >> backend/.env
            echo 'DB_USER=${{ secrets.DB_USER }}' >> backend/.env
            echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> backend/.env
            echo 'DB_DIALECT=postgres' >> backend/.env
            echo 'REDIS_HOST=redis' >> backend/.env
            echo 'REDIS_PORT=6379' >> backend/.env
            echo 'REDIS_URL=redis://redis:6379' >> backend/.env
            echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> backend/.env
            echo 'JWT_EXPIRES_IN=24h' >> backend/.env
            echo 'REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}' >> backend/.env
            echo 'JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}' >> backend/.env
            echo 'EMAIL_HOST=${{ secrets.EMAIL_HOST }}' >> backend/.env
            echo 'EMAIL_PORT=${{ secrets.EMAIL_PORT }}' >> backend/.env
            echo 'EMAIL_SECURE=${{ secrets.EMAIL_SECURE }}' >> backend/.env
            echo 'EMAIL_USER=${{ secrets.EMAIL_USER }}' >> backend/.env
            echo 'EMAIL_PASS=${{ secrets.EMAIL_PASS }}' >> backend/.env
            echo 'EMAIL_FROM=${{ secrets.EMAIL_FROM }}' >> backend/.env
            echo 'COMPANY_NAME=Change Ambassadors' >> backend/.env
            echo 'COMPANY_ADDRESS=Kampala, Uganda' >> backend/.env
            echo 'SUPPORT_EMAIL=support@changeambassadors.com' >> backend/.env
            echo 'YOUTUBE_CLIENT_ID=${{ secrets.YOUTUBE_CLIENT_ID }}' >> backend/.env
            echo 'YOUTUBE_CLIENT_SECRET=${{ secrets.YOUTUBE_CLIENT_SECRET }}' >> backend/.env
            echo 'YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}' >> backend/.env
            echo 'YOUTUBE_REDIRECT_URI=https://syncli.cloud/api/v1/auth/youtube/callback' >> backend/.env
            echo 'MAX_VIDEO_SIZE=134217728' >> backend/.env
            echo 'MAX_FILE_SIZE=10485760' >> backend/.env
            echo 'TEMP_UPLOAD_DIR=/tmp/video-uploads' >> backend/.env
            echo 'UPLOAD_DIR=./uploads' >> backend/.env
            echo 'CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}' >> backend/.env
            echo 'CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}' >> backend/.env
            echo 'CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}' >> backend/.env
            echo 'FRONTEND_URL=https://syncli.cloud' >> backend/.env
            echo 'GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}' >> backend/.env
            echo 'GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}' >> backend/.env
            echo 'GOOGLE_REDIRECT_URI=https://syncli.cloud/register' >> backend/.env
            echo 'FACEBOOK_APP_ID=${{ secrets.FACEBOOK_APP_ID }}' >> backend/.env
            echo 'FACEBOOK_APP_SECRET=${{ secrets.FACEBOOK_APP_SECRET }}' >> backend/.env
            echo 'FACEBOOK_REDIRECT_URI=https://syncli.cloud/register' >> backend/.env
            echo 'LINKEDIN_CLIENT_ID=${{ secrets.LINKEDIN_CLIENT_ID }}' >> backend/.env
            echo 'LINKEDIN_CLIENT_SECRET=${{ secrets.LINKEDIN_CLIENT_SECRET }}' >> backend/.env
            echo 'LINKEDIN_REDIRECT_URI=https://syncli.cloud/register' >> backend/.env
            echo 'SESSION_SECRET=${{ secrets.SESSION_SECRET }}' >> backend/.env
            echo 'GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}' >> backend/.env
            echo 'SENTRY_DSN=${{ secrets.SENTRY_DSN }}' >> backend/.env
            
            # Create frontend .env file
            echo 'VITE_API_BASE_URL=/api/v1' > frontend/.env
            echo 'VITE_API_HOST=syncli.cloud' >> frontend/.env
            echo 'VITE_API_PORT=443' >> frontend/.env
            echo 'VITE_API_PROTOCOL=https:' >> frontend/.env
            echo 'VITE_SOCKET_PATH=/socket.io' >> frontend/.env
            echo 'VITE_SOCKET_HOST=syncli.cloud' >> frontend/.env
            echo 'VITE_SOCKET_PORT=443' >> frontend/.env
            echo 'VITE_SOCKET_PROTOCOL=https:' >> frontend/.env
            echo 'VITE_APP_NAME=Attendance Tracker' >> frontend/.env
            echo 'VITE_APP_VERSION=1.0.0' >> frontend/.env
            echo 'VITE_ENABLE_SOCKET_IO=true' >> frontend/.env
            echo 'VITE_ENABLE_NOTIFICATIONS=true' >> frontend/.env
            echo 'VITE_SESSION_TIMEOUT=3600000' >> frontend/.env
            echo 'VITE_USE_PROXY=false' >> frontend/.env
            echo 'VITE_THEME_COLOR_PRIMARY=#fddc9a' >> frontend/.env
            echo 'VITE_THEME_COLOR_SECONDARY=#000000' >> frontend/.env
            echo 'VITE_THEME_COLOR_SUCCESS=#4caf50' >> frontend/.env
            echo 'VITE_THEME_COLOR_ERROR=#f44336' >> frontend/.env
            echo 'VITE_THEME_COLOR_WARNING=#ff9800' >> frontend/.env
            echo 'VITE_THEME_COLOR_INFO=#2196f3' >> frontend/.env
            echo 'VITE_THEME_BG_DEFAULT=#f5f5f5' >> frontend/.env
            echo 'VITE_THEME_BG_PAPER=#ffffff' >> frontend/.env
            echo 'VITE_THEME_TEXT_PRIMARY=#000000' >> frontend/.env
            echo 'VITE_THEME_TEXT_SECONDARY=#757575' >> frontend/.env
            echo 'VITE_GOOGLE_REDIRECT_URI=https://syncli.cloud/register' >> frontend/.env
            echo 'VITE_FACEBOOK_REDIRECT_URI=https://syncli.cloud/register' >> frontend/.env
            echo 'VITE_GITHUB_REDIRECT_URI=https://syncli.cloud/register' >> frontend/.env
            echo 'VITE_LINKEDIN_REDIRECT_URI=https://syncli.cloud/register' >> frontend/.env
            
            # Set permissions
            chmod 600 .env backend/.env frontend/.env
            echo '✅ Environment files created successfully'
            ls -la .env backend/.env frontend/.env
          "

      - name: Check and Start Redis Service
        run: |
          echo "🔍 Checking Redis service status..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}' &&
            
            # Check if Redis is already running on port 6380
            if netstat -tlpn | grep ':6380' > /dev/null; then
              echo '✅ Redis is already running on port 6380'
              docker-compose -f docker-compose.prod.yml ps redis
            else
              echo '🚀 Starting Redis service...'
              docker-compose -f docker-compose.prod.yml up -d redis
              sleep 5
              echo '✅ Redis service started'
            fi
          "

      - name: Validate Docker Compose Configuration
        run: |
          echo "🔍 Validating Docker Compose configuration..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}' &&
            docker-compose -f docker-compose.prod.yml config --quiet && 
            echo '✅ Docker Compose configuration is valid' || 
            (echo '❌ Docker Compose configuration has errors' && exit 1)
          "

      - name: Build and Start Services
        run: |
          echo "🚀 Building and starting application services..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}' && 
            
            # Stop any existing backend/frontend containers
            docker-compose -f docker-compose.prod.yml stop backend frontend 2>/dev/null || true &&
            
            # Build the services
            echo '📦 Building backend and frontend...' &&
            docker-compose -f docker-compose.prod.yml build backend frontend &&
            
            # Start the services
            echo '🚀 Starting backend and frontend services...' &&
            docker-compose -f docker-compose.prod.yml up -d backend frontend &&
            
            echo '✅ Services started successfully'
          "

      - name: Health Check
        run: |
          echo "🔍 Running health checks..."
          ssh root@77.37.121.27 "
            cd '${{ env.DEPLOY_PATH }}' && 
            echo '=== Docker Services Status ===' && 
            docker-compose -f docker-compose.prod.yml ps && 
            echo '' &&
            
            # Wait for services to be ready
            echo '⏳ Waiting for services to start...' &&
            sleep 30 && 
            
            echo '=== Backend Health Check ===' && 
            curl -f http://localhost:5000/health || curl -f http://localhost:5000/api/health || curl -f http://localhost:5000/ || echo '⚠️ Backend health check failed' && 
            echo '' &&
            
            echo '=== Frontend Health Check ===' && 
            curl -f http://localhost:5173/ || echo '⚠️ Frontend health check failed' && 
            echo '' &&
            
            echo '=== Port Status ===' &&
            echo 'Redis (6380):' && netstat -tlpn | grep :6380 || echo 'Not bound' &&
            echo 'Backend (5000):' && netstat -tlpn | grep :5000 || echo 'Not bound' &&
            echo 'Frontend (5173):' && netstat -tlpn | grep :5173 || echo 'Not bound' &&
            
            echo '✅ Health checks completed'
          "

      - name: Final Status
        if: always()
        run: |
          echo "📊 Deployment completed at $(date)"
          echo "🌐 Application URL: https://syncli.cloud/"
          echo "🔧 Backend API: https://syncli.cloud/api/"
          echo "📱 Frontend: https://syncli.cloud/"
          echo ""
          echo "🏗️ Infrastructure:"
          echo "  - PostgreSQL: System service (port 5432)"
          echo "  - Redis: Docker container (port 6380)"
          echo "  - Backend: Docker container (port 5000)"
          echo "  - Frontend: Docker container (port 80)"
          echo ""
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed! Check the logs above."
          fi
