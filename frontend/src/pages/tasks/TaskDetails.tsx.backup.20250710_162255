import React, { useState, useRef } from 'react';
import { useParams, Link } from 'react-router-dom';
import { 
  FaArrowLeft, 
  FaEdit, 
  FaTrash, 
  FaClock, 
  FaUser, 
  FaTag, 
  FaCheck,
  FaCalendarAlt,
  FaFlag,
  FaPaperclip,
  FaImage,
  FaHeart,
  FaShare,
  FaComment,
  FaSmile,
  FaThumbsUp,
  FaTimes,
  FaUpload,
  FaFileAlt,
  FaDownload
} from 'react-icons/fa';
import { useTask } from '../../hooks/useTasks';
import { useRealTimeUpdates } from '../../hooks/useRealTimeUpdates';
import { useAuth } from '../../contexts/useAuth';
import TaskActivityFeed from '../../components/tasks/TaskActivityFeed';
import UserAvatar from '../../components/social/UserAvatar';
import { useComments } from '../../hooks/useComments';
import type { Task } from '../../types';
import { taskService } from '../../services/taskService';
import { showToast } from '../../utils/toast';

// Emoji picker data
const EMOJI_OPTIONS = ['üëç', '‚ù§Ô∏è', 'üòä', 'üéâ', 'üî•', 'üëè', 'üíØ', 'üöÄ', '‚ú®', 'üí°'];

interface Comment {
  id: number;
  content: string;
  userId: number;
  taskId: number;
  parentId?: number;
  user: {
    id: number;
    firstName: string;
    lastName: string;
    profilePicture?: string;
  };
  createdAt: string;
  updatedAt: string;
  likeCount: number;
  reactions: Array<{
    emoji: string;
    count: number;
    users: Array<{ id: number; firstName: string; lastName: string }>;
  }>;
  replies: Comment[];
  attachments?: Array<{
    id: number;
    fileName: string;
    fileUrl: string;
    fileType: string;
    fileSize: number;
  }>;
}

const TaskDetails: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const taskId = id || '0';
  const { user } = useAuth();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const imageInputRef = useRef<HTMLInputElement>(null);
  
  const [showComments, setShowComments] = useState(true);
  const [showActivity, setShowActivity] = useState(false);
  const [newComment, setNewComment] = useState('');
  const [replyingTo, setReplyingTo] = useState<number | null>(null);
  const [showEmojiPicker, setShowEmojiPicker] = useState<number | null>(null);
  const [uploadingFile, setUploadingFile] = useState(false);
  const [attachments, setAttachments] = useState<File[]>([]);
  
  const { task, loading: isLoading, error, refreshTask } = useTask(taskId);
  const { comments, isLoading: isCommentsLoading, error: commentsError } = useComments({ taskId: parseInt(taskId) });

  // Enable real-time updates for this task
  useRealTimeUpdates({ taskId: parseInt(taskId), enabled: true });

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        <span className="ml-2 text-gray-600">Loading task...</span>
      </div>
    );
  }

  if (error || !task) {
    return (
      <div className="p-4 text-red-600 bg-red-50 rounded-lg">
        Error loading task: {error || 'Task not found'}
        <Link to="/boards" className="ml-2 text-blue-600 hover:underline">
          Back to Boards
        </Link>
      </div>
    );
  }

  const isAdmin = user?.role === 'admin' || user?.role === 'moderator';

  const updateTask = async (id: string, data: any) => {
    try {
      await taskService.updateTask(id, data);
      refreshTask();
      showToast.success('Task updated successfully');
    } catch (error) {
      console.error('Error updating task:', error);
      showToast.error('Failed to update task');
    }
  };

  const deleteTask = async (id: string) => {
    try {
      await taskService.deleteTask(id);
      showToast.success('Task deleted successfully');
      window.history.back();
    } catch (error) {
      console.error('Error deleting task:', error);
      showToast.error('Failed to delete task');
    }
  };

  const markAsCompleted = async () => {
    await updateTask(taskId, { status: 'done', completedAt: new Date().toISOString() });
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    setAttachments(prev => [...prev, ...files]);
  };

  const removeAttachment = (index: number) => {
    setAttachments(prev => prev.filter((_, i) => i !== index));
  };

  const handleAddComment = async () => {
    if (!newComment.trim()) return;

    const comment: Comment = {
      id: Date.now(),
      content: newComment,
      userId: parseInt(user?.id?.toString() || '1'),
      taskId: parseInt(taskId),
      parentId: replyingTo || undefined,
      user: {
        id: parseInt(user?.id?.toString() || '1'),
        firstName: user?.firstName || "Current",
        lastName: user?.lastName || "User",
        profilePicture: user?.profilePicture
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      likeCount: 0,
      reactions: [],
      replies: [],
      attachments: []
    };

    if (replyingTo) {
      setComments(prev => 
        prev.map(c => 
          c.id === replyingTo 
            ? { ...c, replies: [...c.replies, comment] }
            : c
        )
      );
    } else {
      setComments(prev => [comment, ...prev]);
    }

    setNewComment('');
    setReplyingTo(null);
    setAttachments([]);
    showToast.success('Comment added successfully');
  };

  const handleReaction = (commentId: number, emoji: string) => {
    setComments(prev =>
      prev.map(comment => {
        if (comment.id === commentId) {
          const existingReaction = comment.reactions.find(r => r.emoji === emoji);
          if (existingReaction) {
            return {
              ...comment,
              reactions: comment.reactions.map(r =>
                r.emoji === emoji
                  ? { ...r, count: r.count + 1 }
                  : r
              )
            };
          } else {
            return {
              ...comment,
              reactions: [...comment.reactions, { emoji, count: 1, users: [] }]
            };
          }
        }
        return comment;
      })
    );
    setShowEmojiPicker(null);
  };

  const shareTask = () => {
    const url = window.location.href;
    navigator.clipboard.writeText(url);
    showToast.success('Task link copied to clipboard!');
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'high':
        return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low':
        return 'bg-green-100 text-green-800 border-green-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'done':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'in_progress':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'review':
        return 'bg-purple-100 text-purple-800 border-purple-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const renderComment = (comment: Comment, isReply = false) => (
    <div key={comment.id} className={`${isReply ? 'ml-12 mt-3' : 'mb-6'} bg-white rounded-lg border p-4`}>
      <div className="flex items-start space-x-3">
        <UserAvatar user={comment.user} size="sm" />
        <div className="flex-1">
          <div className="flex items-center space-x-2 mb-2">
            <span className="font-medium text-gray-900">
              {comment.user.firstName} {comment.user.lastName}
            </span>
            <span className="text-sm text-gray-500">
              {new Date(comment.createdAt).toLocaleDateString()}
            </span>
          </div>
          
          <p className="text-gray-700 mb-3">{comment.content}</p>
          
          {comment.attachments && comment.attachments.length > 0 && (
            <div className="mb-3 space-y-2">
              {comment.attachments.map((attachment, index) => (
                <div key={index} className="flex items-center space-x-2 p-2 bg-gray-50 rounded border">
                  {attachment.fileType.startsWith('image/') ? (
                    <FaImage className="text-blue-500" />
                  ) : (
                    <FaFileAlt className="text-gray-500" />
                  )}
                  <span className="text-sm text-gray-700">{attachment.fileName}</span>
                  <span className="text-xs text-gray-500">({formatFileSize(attachment.fileSize)})</span>
                  <button className="ml-auto text-blue-500 hover:text-blue-700">
                    <FaDownload className="h-4 w-4" />
                  </button>
                </div>
              ))}
            </div>
          )}
          
          <div className="flex items-center space-x-4">
            <button 
              onClick={() => setReplyingTo(comment.id)}
              className="text-sm text-gray-500 hover:text-blue-600 flex items-center space-x-1"
            >
              <FaComment className="h-3 w-3" />
              <span>Reply</span>
            </button>
            
            <div className="flex items-center space-x-1">
              <button 
                onClick={() => setShowEmojiPicker(showEmojiPicker === comment.id ? null : comment.id)}
                className="text-sm text-gray-500 hover:text-blue-600 flex items-center space-x-1"
              >
                <FaSmile className="h-3 w-3" />
                <span>React</span>
              </button>
              
              {showEmojiPicker === comment.id && (
                <div className="absolute z-10 bg-white border rounded-lg shadow-lg p-2 flex space-x-1">
                  {EMOJI_OPTIONS.map(emoji => (
                    <button
                      key={emoji}
                      onClick={() => handleReaction(comment.id, emoji)}
                      className="hover:bg-gray-100 p-1 rounded text-lg"
                    >
                      {emoji}
                    </button>
                  ))}
                </div>
              )}
            </div>
            
            <button className="text-sm text-gray-500 hover:text-blue-600 flex items-center space-x-1">
              <FaShare className="h-3 w-3" />
              <span>Share</span>
            </button>
          </div>
          
          {comment.reactions.length > 0 && (
            <div className="flex items-center space-x-2 mt-2">
              {comment.reactions.map((reaction, index) => (
                <span 
                  key={index}
                  className="inline-flex items-center space-x-1 bg-gray-100 rounded-full px-2 py-1 text-xs"
                >
                  <span>{reaction.emoji}</span>
                  <span>{reaction.count}</span>
                </span>
              ))}
            </div>
          )}
          
          {comment.replies.length > 0 && (
            <div className="mt-4">
              {comment.replies.map(reply => renderComment(reply, true))}
            </div>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Sticky Header */}
      <div className="sticky top-0 z-50 bg-white border-b shadow-sm">
        <div className="max-w-6xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link 
                to={task.list?.board?.id ? `/boards/${task.list.board.id}` : '/boards'}
                className="text-gray-500 hover:text-gray-700 p-2 rounded-lg hover:bg-gray-100"
              >
                <FaArrowLeft className="h-5 w-5" />
              </Link>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">{task.title}</h1>
                <p className="text-gray-600">
                  in {task.list?.name} ‚Ä¢ {task.list?.board?.name}
                </p>
                {task.startDate && task.dueDate && (
                  <p className="text-sm text-gray-500">
                    <FaCalendarAlt className="inline-block mr-1" />
                    {new Date(task.startDate).toLocaleDateString()} - {new Date(task.dueDate).toLocaleDateString()}
                  </p>
                )}
              </div>
            </div>

            <div className="flex items-center space-x-2">
              {isAdmin && task.status !== 'done' && (
                <button
                  onClick={markAsCompleted}
                  className="flex items-center space-x-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
                >
                  <FaCheck className="h-4 w-4" />
                  <span>Mark as Completed</span>
                </button>
              )}
              
              <button
                onClick={shareTask}
                className="text-gray-500 hover:text-blue-600 p-2 rounded-lg hover:bg-blue-50"
              >
                <FaShare className="h-5 w-5" />
              </button>
              
              <Link
                to={`/tasks/${taskId}/edit`}
                className="text-gray-500 hover:text-blue-600 p-2 rounded-lg hover:bg-blue-50"
              >
                <FaEdit className="h-5 w-5" />
              </Link>
              
              {isAdmin && (
                <button
                  onClick={() => deleteTask(taskId)}
                  className="text-gray-500 hover:text-red-600 p-2 rounded-lg hover:bg-red-50"
                >
                  <FaTrash className="h-5 w-5" />
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-6 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Task Description */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Description</h2>
              {task.description ? (
                <p className="text-gray-700 whitespace-pre-wrap">{task.description}</p>
              ) : (
                <p className="text-gray-500 italic">No description provided</p>
              )}
            </div>

            {/* Task Details Section */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Task Details</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {task.startDate && (
                  <div className="flex items-center space-x-3">
                    <FaCalendarAlt className="h-5 w-5 text-green-500" />
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Start Date</label>
                      <span className="text-sm text-gray-600">
                        {new Date(task.startDate).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                )}
                
                {task.dueDate && (
                  <div className="flex items-center space-x-3">
                    <FaClock className="h-5 w-5 text-orange-500" />
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Due Date</label>
                      <span className="text-sm text-gray-600">
                        {new Date(task.dueDate).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                )}
              </div>
              
              {/* Milestones */}
              <div className="mt-6">
                <h3 className="text-md font-medium text-gray-900 mb-3">Milestones</h3>
                <div className="space-y-2">
                  <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                    <FaFlag className="h-4 w-4 text-blue-500" />
                    <span className="text-sm text-gray-700">Initial Setup Complete</span>
                    <span className="ml-auto text-xs text-green-600 bg-green-100 px-2 py-1 rounded">Completed</span>
                  </div>
                  <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                    <FaFlag className="h-4 w-4 text-yellow-500" />
                    <span className="text-sm text-gray-700">Development Phase</span>
                    <span className="ml-auto text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded">In Progress</span>
                  </div>
                  <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                    <FaFlag className="h-4 w-4 text-gray-400" />
                    <span className="text-sm text-gray-700">Testing & Review</span>
                    <span className="ml-auto text-xs text-gray-600 bg-gray-100 px-2 py-1 rounded">Pending</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Checklist */}
            {task.checklist && task.checklist.length > 0 && (
              <div className="bg-white rounded-lg shadow-sm border p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4">Checklist</h2>
                <div className="space-y-2">
                  {task.checklist.map((item, index) => (
                    <div key={index} className="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        checked={item.completed}
                        onChange={(e) => {
                          const newChecklist = [...task.checklist];
                          newChecklist[index].completed = e.target.checked;
                          updateTask(taskId, { checklist: newChecklist });
                        }}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                      <span className={`text-sm ${item.completed ? 'line-through text-gray-500' : 'text-gray-700'}`}>
                        {item.text}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Enhanced Comments Section */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-lg font-semibold text-gray-900">
                  Comments ({comments.length})
                </h2>
              </div>

              {/* Add Comment Form */}
              <div className="mb-6 border rounded-lg p-4 bg-gray-50">
                <div className="flex items-start space-x-3">
                  <UserAvatar user={user} size="sm" />
                  <div className="flex-1">
                    <textarea
                      value={newComment}
                      onChange={(e) => setNewComment(e.target.value)}
                      placeholder={replyingTo ? "Write a reply..." : "Add a comment..."}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
                      rows={3}
                    />
                    
                    {/* Attachment Preview */}
                    {attachments.length > 0 && (
                      <div className="mt-3 space-y-2">
                        {attachments.map((file, index) => (
                          <div key={index} className="flex items-center space-x-2 p-2 bg-white rounded border">
                            {file.type.startsWith('image/') ? (
                              <FaImage className="text-blue-500" />
                            ) : (
                              <FaFileAlt className="text-gray-500" />
                            )}
                            <span className="text-sm text-gray-700">{file.name}</span>
                            <span className="text-xs text-gray-500">({formatFileSize(file.size)})</span>
                            <button 
                              onClick={() => removeAttachment(index)}
                              className="ml-auto text-red-500 hover:text-red-700"
                            >
                              <FaTimes className="h-3 w-3" />
                            </button>
                          </div>
                        ))}
                      </div>
                    )}
                    
                    <div className="flex items-center justify-between mt-3">
                      <div className="flex items-center space-x-2">
                        <input
                          ref={imageInputRef}
                          type="file"
                          accept="image/*"
                          multiple
                          onChange={handleFileUpload}
                          className="hidden"
                        />
                        <button
                          onClick={() => imageInputRef.current?.click()}
                          className="text-gray-500 hover:text-blue-600 p-2 rounded"
                          title="Add image"
                        >
                          <FaImage className="h-4 w-4" />
                        </button>
                        
                        <input
                          ref={fileInputRef}
                          type="file"
                          multiple
                          onChange={handleFileUpload}
                          className="hidden"
                        />
                        <button
                          onClick={() => fileInputRef.current?.click()}
                          className="text-gray-500 hover:text-blue-600 p-2 rounded"
                          title="Add attachment"
                        >
                          <FaPaperclip className="h-4 w-4" />
                        </button>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        {replyingTo && (
                          <button
                            onClick={() => setReplyingTo(null)}
                            className="px-3 py-1 text-sm text-gray-600 hover:text-gray-800"
                          >
                            Cancel
                          </button>
                        )}
                        <button
                          onClick={handleAddComment}
                          disabled={!newComment.trim()}
                          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
                        >
                          {replyingTo ? 'Reply' : 'Comment'}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Comments List */}
              <div className="space-y-4">
                {isCommentsLoading ? (
                  <div>Loading comments...</div>
                ) : commentsError ? (
                  <div>Error loading comments: {commentsError.message}</div>
                ) : comments.length === 0 ? (
                  <div>No comments yet. Be the first to comment!</div>
                ) : (
                  comments.map(comment => renderComment(comment))
                )}
              </div>
            </div>

            {/* Activity Feed */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <TaskActivityFeed
                taskId={parseInt(taskId)}
                boardId={task.list?.board?.id || 0}
                isOpen={showActivity}
                onToggle={() => setShowActivity(!showActivity)}
              />
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Task Status & Priority */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Status</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Current Status</label>
                  <span className={`inline-block px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(task.status)}`}>
                    {task.status.replace('_', ' ')}
                  </span>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Priority</label>
                  <span className={`inline-block px-3 py-1 rounded-full text-xs font-medium border ${getPriorityColor(task.priority)}`}>
                    {task.priority}
                  </span>
                </div>

                {task.completedAt && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Completed At</label>
                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                      <FaCheck className="h-4 w-4 text-green-500" />
                      <span>{new Date(task.completedAt).toLocaleDateString()}</span>
                    </div>
                  </div>
                )}

                {task.estimatedHours && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Estimated Hours</label>
                    <p className="text-sm text-gray-600">{task.estimatedHours}h</p>
                  </div>
                )}

                {task.actualHours && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Actual Hours</label>
                    <p className="text-sm text-gray-600">{task.actualHours}h</p>
                  </div>
                )}
              </div>
            </div>

            {/* Assignees */}
            {task.assignedTo && task.assignedTo.length > 0 && (
              <div className="bg-white rounded-lg shadow-sm border p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4">Assignees</h2>
                <div className="space-y-2">
                  {task.assignedTo.map((user) => (
                    <div key={user.id} className="flex items-center space-x-3">
                      <UserAvatar user={user} size="sm" />
                      <span className="text-sm text-gray-700">
                        {user.firstName} {user.lastName}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Labels */}
            {task.labels && task.labels.length > 0 && (
              <div className="bg-white rounded-lg shadow-sm border p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4">Labels</h2>
                <div className="flex flex-wrap gap-2">
                  {task.labels.map((label, index) => (
                    <span
                      key={index}
                      className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                    >
                      <FaTag className="h-3 w-3 mr-1" />
                      {label}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* Creator */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Created By</h2>
              <div className="flex items-center space-x-3">
                <UserAvatar user={task.creator} size="sm" />
                <div>
                  <p className="text-sm font-medium text-gray-900">
                    {task.creator.firstName} {task.creator.lastName}
                  </p>
                  <p className="text-xs text-gray-500">
                    {new Date(task.createdAt).toLocaleDateString()}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TaskDetails;
