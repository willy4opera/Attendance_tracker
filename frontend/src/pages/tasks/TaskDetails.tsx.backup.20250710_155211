import React, { useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import { FaArrowLeft, FaEdit, FaTrash, FaClock, FaUser, FaTag } from 'react-icons/fa';
import { useTask } from '../../hooks/useTasks';
import { useRealTimeUpdates } from '../../hooks/useRealTimeUpdates';
import TaskComments from '../../components/tasks/TaskComments';
import TaskActivityFeed from '../../components/tasks/TaskActivityFeed';
import UserAvatar from '../../components/social/UserAvatar';
import type { Task } from '../../types';
import { taskService } from '../../services/taskService';

const TaskDetails: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const taskId = id || '0';
  const [showComments, setShowComments] = useState(true);
  const [showActivity, setShowActivity] = useState(false);
  
  const { task, loading: isLoading, error, refreshTask } = useTask(taskId);

  // Enable real-time updates for this task
  useRealTimeUpdates({ taskId: parseInt(taskId), enabled: true });

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        <span className="ml-2 text-gray-600">Loading task...</span>
      </div>
    );
  }

  if (error || !task) {
    return (
      <div className="p-4 text-red-600 bg-red-50 rounded-lg">
        Error loading task: {error || 'Task not found'}
        <Link to="/boards" className="ml-2 text-blue-600 hover:underline">
          Back to Boards
        </Link>
      </div>
    );
  }

  const updateTask = async (id: string, data: any) => {
    try {
      await taskService.updateTask(id, data);
      refreshTask();
    } catch (error) {
      console.error('Error updating task:', error);
    }
  };

  const deleteTask = async (id: string) => {
    try {
      await taskService.deleteTask(id);
      // Navigate back to boards after deletion
      window.history.back();
    } catch (error) {
      console.error('Error deleting task:', error);
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent':
        return 'bg-red-100 text-red-800';
      case 'high':
        return 'bg-orange-100 text-orange-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      case 'low':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'done':
        return 'bg-green-100 text-green-800';
      case 'in_progress':
        return 'bg-blue-100 text-blue-800';
      case 'review':
        return 'bg-purple-100 text-purple-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="p-6 max-w-6xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Link 
            to={task.list?.board?.id ? `/boards/${task.list.board.id}` : '/boards'}
            className="text-gray-500 hover:text-gray-700 p-2 rounded-lg hover:bg-gray-100"
          >
            <FaArrowLeft className="h-5 w-5" />
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{task.title}</h1>
            <p className="text-gray-600">
              in {task.list?.name} â€¢ {task.list?.board?.name}
            </p>
          </div>
        </div>

        <div className="flex items-center space-x-2">
          <Link
            to={`/tasks/${taskId}/edit`}
            className="text-gray-500 hover:text-blue-600 p-2 rounded-lg hover:bg-blue-50"
          >
            <FaEdit className="h-5 w-5" />
          </Link>
          <button
            onClick={() => deleteTask(taskId)}
            className="text-gray-500 hover:text-red-600 p-2 rounded-lg hover:bg-red-50"
          >
            <FaTrash className="h-5 w-5" />
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Task Description */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Description</h2>
            {task.description ? (
              <p className="text-gray-700 whitespace-pre-wrap">{task.description}</p>
            ) : (
              <p className="text-gray-500 italic">No description provided</p>
            )}
          </div>

          {/* Checklist */}
          {task.checklist && task.checklist.length > 0 && (
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Checklist</h2>
              <div className="space-y-2">
                {task.checklist.map((item, index) => (
                  <div key={index} className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={item.completed}
                      onChange={(e) => {
                        const newChecklist = [...task.checklist];
                        newChecklist[index].completed = e.target.checked;
                        updateTask(taskId, { checklist: newChecklist });
                      }}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <span className={`text-sm ${item.completed ? 'line-through text-gray-500' : 'text-gray-700'}`}>
                      {item.text}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Comments */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <TaskComments
              taskId={parseInt(taskId)}
              isOpen={showComments}
              onToggle={() => setShowComments(!showComments)}
              commentCount={task.commentCount}
            />
          </div>

          {/* Activity */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <TaskActivityFeed
              taskId={parseInt(taskId)}
              boardId={task.list?.board?.id || 0}
              isOpen={showActivity}
              onToggle={() => setShowActivity(!showActivity)}
            />
          </div>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Task Details */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Details</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(task.status)}`}>
                  {task.status}
                </span>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Priority</label>
                <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(task.priority)}`}>
                  {task.priority}
                </span>
              </div>

              {task.dueDate && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
                  <div className="flex items-center space-x-2 text-sm text-gray-600">
                    <FaClock className="h-4 w-4" />
                    <span>{new Date(task.dueDate).toLocaleDateString()}</span>
                  </div>
                </div>
              )}

              {task.estimatedHours && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Estimated Hours</label>
                  <p className="text-sm text-gray-600">{task.estimatedHours}h</p>
                </div>
              )}

              {task.actualHours && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Actual Hours</label>
                  <p className="text-sm text-gray-600">{task.actualHours}h</p>
                </div>
              )}
            </div>
          </div>

          {/* Assignees */}
          {task.assignedTo && task.assignedTo.length > 0 && (
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Assignees</h2>
              <div className="space-y-2">
                {task.assignedTo.map((user) => (
                  <div key={user.id} className="flex items-center space-x-3">
                    <UserAvatar user={user} size="sm" />
                    <span className="text-sm text-gray-700">
                      {user.firstName} {user.lastName}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Labels */}
          {task.labels && task.labels.length > 0 && (
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Labels</h2>
              <div className="flex flex-wrap gap-2">
                {task.labels.map((label, index) => (
                  <span
                    key={index}
                    className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                  >
                    <FaTag className="h-3 w-3 mr-1" />
                    {label}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* Creator */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Created By</h2>
            <div className="flex items-center space-x-3">
              <UserAvatar user={task.creator} size="sm" />
              <div>
                <p className="text-sm font-medium text-gray-900">
                  {task.creator.firstName} {task.creator.lastName}
                </p>
                <p className="text-xs text-gray-500">
                  {new Date(task.createdAt).toLocaleDateString()}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TaskDetails;
