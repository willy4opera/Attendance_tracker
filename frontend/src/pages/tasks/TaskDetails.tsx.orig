import React, { useState } from 'react';
import taskService from '../../services/taskService';
import { useParams, Link } from 'react-router-dom';
import { FaClock, FaUser, FaTag, FaTimes } from 'react-icons/fa';
import { useTask } from '../../hooks/useTasks';
import { useRealTimeUpdates } from '../../hooks/useRealTimeUpdates';
import { useAuth } from '../../contexts/useAuth';
import TaskComments from '../../components/tasks/TaskComments';
import TaskActivityFeed from '../../components/tasks/TaskActivityFeed';
import UserAvatar from '../../components/social/UserAvatar';
import TaskHeader from '../../components/tasks/details/TaskHeader';
import EditTaskModal from '../../components/tasks/EditTaskModal';
import TaskDetailsSection from '../../components/tasks/details/TaskDetailsSection';
import CommentsSection from '../../components/tasks/details/CommentsSection';
import { useComments } from '../../hooks/useComments';
import type { UpdateTaskData, CreateTaskData } from '../../../services/taskService';
import { showToast } from '../../utils/toast';
import theme from '../../config/theme';

const TaskDetails: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const taskId = id || '0';
  const { user } = useAuth();
  console.log('[TaskDetails] Current user from auth:', user);
  // Store user info in localStorage for optimistic updates
  React.useEffect(() => {
    if (user) {
      localStorage.setItem('userId', String(user.id || user._id));
      localStorage.setItem('userFirstName', user.firstName || '');
      localStorage.setItem('userLastName', user.lastName || '');
      localStorage.setItem('userEmail', user.email || '');
      localStorage.setItem('userProfilePicture', user.profilePicture || '');
    }
  }, [user]);

  const [showComments, setShowComments] = useState(true);
  const [showActivity, setShowActivity] = useState(false);
  const [showMobileSidebar, setShowMobileSidebar] = useState(false);
  const [editingTaskId, setEditingTaskId] = useState<string | null>(null);

  const { task, loading: isLoading, error, refreshTask } = useTask(taskId);
  const {
    comments,
    isLoading: isCommentsLoading,
    error: commentsError,
    createComment,
    refetch: refetchComments,
    likeComment,
    unlikeComment,
  } = useComments({ taskId: parseInt(taskId), realTimeUpdates: true });

  useRealTimeUpdates({ taskId: parseInt(taskId), enabled: true });

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2" style={{ borderColor: theme.colors.primary }}></div>
        <span className="ml-2" style={{ color: theme.colors.secondary }}>Loading task...</span>
      </div>
    );
  }

  if (error || !task) {
    return (
      <div className="p-4 text-red-600 bg-red-50 rounded-lg">
        Error loading task: {error || 'Task not found'}
        <Link to="/boards" className="ml-2 text-blue-600 hover:underline">
          Back to Boards
        </Link>
      </div>
    );
  }

  const isAdmin = user?.role === 'admin' || user?.role === 'moderator';

  const updateTask = async (id: string, data: any) => {
    try {
      await taskService.updateTask(id, data);
      refreshTask();
      showToast.success('Task updated successfully');
    } catch (error) {
      console.error('Error updating task:', error);
      showToast.error('Failed to update task');
    }
  };

  const deleteTask = async (id: string) => {
    try {
      await taskService.deleteTask(id);
      showToast.success('Task deleted successfully');
      window.history.back();
    } catch (error) {
      console.error('Error deleting task:', error);
      showToast.error('Failed to delete task');
    }
  };

  const markAsCompleted = async () => {
    await updateTask(taskId, { status: 'done', completedAt: new Date().toISOString() });
  };

  const handleAddComment = async (newComment: string, attachments: File[], replyingTo: number | null) => {
    try {
      console.log('[TaskDetails] Creating comment...');
      await createComment({ taskId: parseInt(taskId), content: newComment, parentId: replyingTo || undefined, attachments });
      console.log('[TaskDetails] Refetching comments after creation...');
      await refetchComments();
      console.log('[TaskDetails] Refetch complete');
    } catch (error) {
      console.error('Error adding comment:', error);
      showToast.error('Failed to add comment');
    }
  };

  const handleEditTask = () => {
    setEditingTaskId(taskId);
  };

  const handleUpdateTask = () => {
    setEditingTaskId(null);
    refreshTask();
  };

  const shareTask = () => {
    const url = window.location.href;
    navigator.clipboard.writeText(url);
    showToast.success('Task link copied to clipboard!');
  };

  const Sidebar = () => (
    <div className="space-y-4 md:space-y-6">
      <div key="task-details" className="bg-white rounded-lg shadow-lg border p-4 sm:p-6">
        <h2 className="text-lg font-semibold mb-4" style={{ color: theme.colors.secondary }}>Details</h2>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1" style={{ color: theme.colors.secondary }}>Status</label>
            <span className="inline-block px-2 py-1 rounded-full text-xs font-medium" style={{ backgroundColor: theme.colors.secondary, color: theme.colors.primary }}>
              {task.status}
            </span>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1" style={{ color: theme.colors.secondary }}>Priority</label>
            <span className="inline-block px-2 py-1 rounded-full text-xs font-medium" style={{ backgroundColor: theme.colors.secondary, color: theme.colors.primary }}>
              {task.priority}
            </span>
          </div>
          {task.dueDate && (
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: theme.colors.secondary }}>Due Date</label>
              <div className="flex items-center space-x-2 text-sm"
                style={{ color: theme.colors.secondary, boxShadow: `0 0 0 3px ${theme.colors.primary}`, backgroundColor: theme.colors.secondary, borderRadius: "10px" }}>
                <FaClock className="h-4 w-4" />
                <span>{new Date(task.dueDate).toLocaleDateString()}</span>
              </div>
            </div>
          )}
          {task.estimatedHours && (
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: theme.colors.secondary }}>Estimated Hours</label>
              <p className="text-sm" style={{ color: theme.colors.primary, padding: "5px", backgroundColor: theme.colors.secondary, borderRadius: "5px" }}>{task.estimatedHours}h</p>
            </div>
          )}
          {task.actualHours && (
            <div>
              <label className="block text-sm font-medium mb-1" style={{ color: theme.colors.secondary }}>Actual Hours</label>
              <p className="text-sm" style={{ color: theme.colors.primary, padding: "5px", backgroundColor: theme.colors.secondary, borderRadius: "5px" }}>{task.actualHours}h</p>
            </div>
          )}
        </div>
      </div>
      {task.assignedTo && task.assignedTo.length > 0 && (
        <div key="assignees" className="bg-white hover:bg-gray-100 transition-colors rounded-lg shadow-lg border p-4 sm:p-6">
          <h2 className="text-lg font-semibold mb-4" style={{ color: theme.colors.secondary }}>Assignees</h2>
          <div className="space-y-2">
            {task.assignedTo.map((user, index) => (
              <div key={user.id || `assignee-${index}`} className="flex items-center space-x-3">
                <UserAvatar user={user} size="sm" />
                <span className="text-sm" style={{ color: theme.colors.primary }}>{user.firstName} {user.lastName}</span>
              </div>
            ))}
          </div>
        </div>
      )}
      {task.labels && task.labels.length > 0 && (
        <div key="labels" className="bg-white hover:bg-gray-100 transition-colors rounded-lg shadow-lg border p-4 sm:p-6">
          <h2 className="text-lg font-semibold mb-4" style={{ color: theme.colors.secondary }}>Labels</h2>
          <div className="flex flex-wrap gap-2">
            {task.labels.map((label, index) => (
              <span key={`label-${index}`} className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium" style={{ backgroundColor: theme.colors.secondary, color: theme.colors.primary }}>
                <FaTag className="h-3 w-3 mr-1" />
                {label}
              </span>
            ))}
          </div>
        </div>
      )}
      <div key="creator" className="bg-white rounded-lg shadow-lg border p-4 sm:p-6">
        <h2 className="text-lg font-semibold mb-4" style={{ color: theme.colors.secondary }}>Created By</h2>
        <div className="flex items-center space-x-3">
          <UserAvatar user={task.creator} size="sm" />
          <div>
            <p className="text-sm font-medium" style={{ color: theme.colors.primary }}>{task.creator.firstName} {task.creator.lastName}</p>
            <p className="text-xs" style={{ color: theme.colors.secondary }}>{new Date(task.createdAt).toLocaleDateString()}</p>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      <TaskHeader
        task={task}
        taskId={taskId}
        isAdmin={isAdmin}
        onMarkCompleted={markAsCompleted}
        onDelete={() => deleteTask(taskId)}
        onShare={shareTask}
        onEdit={handleEditTask}
      />
      <div className="lg:hidden px-4 sm:px-6 mb-4">
        <button
          onClick={() => setShowMobileSidebar(!showMobileSidebar)}
          className="w-full px-4 py-2" style={{ backgroundColor: theme.colors.primary, color: '#FFFFFF', borderRadius: '5px' }}>
          {showMobileSidebar ? 'Hide Details' : 'Show Details'}
        </button>
      </div>
      <div className="max-w-6xl mx-auto px-4 sm:px-6 py-4 sm:py-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6">
          <div className="lg:col-span-2 space-y-4 sm:space-y-6">
            <div className="bg-white rounded-lg shadow-lg border p-4 sm:p-6">
              <h2 className="text-lg font-semibold mb-4" style={{ color: theme.colors.secondary }}>Description</h2>
              {task.description ? (
                <p className="whitespace-pre-wrap" style={{ color: theme.colors.secondary }}>{task.description}</p>
              ) : (
                <p className="text-gray-500 italic">No description provided</p>
              )}
            </div>
            <TaskDetailsSection task={task} />
            {task.checklist && task.checklist.length > 0 && (
              <div className="bg-white rounded-lg shadow-lg border p-4 sm:p-6">
                <h2 className="text-lg font-semibold mb-4" style={{ color: theme.colors.secondary }}>Checklist</h2>
                <div className="space-y-2">
                  {task.checklist.map((item, index) => (
                    <div key={`checklist-${index}`} className="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        checked={item.completed}
                        onChange={(e) => {
                          const newChecklist = [...task.checklist];
                          newChecklist[index].completed = e.target.checked;
                          updateTask(taskId, { checklist: newChecklist });
                        }}
                        className="h-4 w-4 focus:ring-blue-500 border-gray-300 rounded"
                      />
                      <span className={`text-sm ${item.completed ? 'line-through' : ''}`}
                        style={{ color: item.completed ? theme.colors.secondary : theme.colors.primary }}>
                        {item.text}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}
            <CommentsSection
              comments={comments || []}
              isCommentsLoading={isCommentsLoading}
              commentsError={commentsError}
              onAddComment={handleAddComment}
              onRefreshComments={async () => await refetchComments()}
              taskId={parseInt(taskId)}
              currentUser={user ? {
                id: typeof user.id === 'number' ? user.id : parseInt(user.id as string) || parseInt(user._id),
                firstName: user.firstName,
                lastName: user.lastName,
                email: user.email,
                profilePicture: user.profilePicture
              } : null}
              onLikeComment={likeComment}
              onUnlikeComment={unlikeComment}
            />
            <div className="bg-white rounded-lg shadow-lg border p-4 sm:p-6">
              <TaskActivityFeed
                taskId={parseInt(taskId)}
                boardId={task.list?.board?.id || 0}
                isOpen={showActivity}
                onToggle={() => setShowActivity(!showActivity)}
              />
            </div>
          </div>
          <div className="hidden lg:block">
            <Sidebar />
          </div>
          {showMobileSidebar && (
            <div className="lg:hidden fixed inset-0 z-50 overflow-y-auto">
              <div className="min-h-screen px-4 sm:px-6 py-6">
                <div
                  className="fixed inset-0 bg-black bg-opacity-50"
                  onClick={() => setShowMobileSidebar(false)}>
                </div>
                <div className="relative bg-gray-50 rounded-lg p-4 max-w-sm mx-auto">
                  <button
                    onClick={() => setShowMobileSidebar(false)}
                    className="absolute top-4 right-4 text-gray-500 hover:text-gray-700">
                    <FaTimes className="h-5 w-5" />
                  </button>
                  <Sidebar />
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
      {editingTaskId && (
        <EditTaskModal
          taskId={editingTaskId}
          isOpen={true}
          onClose={() => setEditingTaskId(null)}
          onSuccess={handleUpdateTask}
        />
      )}
    </div>
  );
};

export default TaskDetails;
