import React, { useState, Fragment } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { 
  XMarkIcon, 
  CalendarIcon, 
  ClockIcon, 
  MapPinIcon, 
  LinkIcon,
  UserGroupIcon,
  TagIcon,
  DocumentTextIcon,
  VideoCameraIcon,
  BuildingOfficeIcon,
  PlusIcon
} from '@heroicons/react/24/outline';
import { PaperClipIcon, DocumentIcon, XCircleIcon } from '@heroicons/react/24/solid';
import sessionService from '../../services/sessionService';
import { useAuth } from '../../contexts/useAuth';
import Swal from 'sweetalert2';
import theme from '../../config/theme';

interface SessionFormData {
  title: string;
  description: string;
  sessionDate: string;
  startTime: string;
  endTime: string;
  location: string;
  meetingType: 'online' | 'offline' | 'hybrid';
  meetingLink: string;
  maxAttendees: number;
  category: string;
  tags: string[];
}

interface CreateSessionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

const CreateSessionModal: React.FC<CreateSessionModalProps> = ({ isOpen, onClose, onSuccess }) => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState<Partial<SessionFormData>>({});
  const [formData, setFormData] = useState<SessionFormData>({
    title: '',
    description: '',
    sessionDate: '',
    startTime: '',
    endTime: '',
    location: '',
    meetingType: 'offline',
    meetingLink: '',
    maxAttendees: 50,
    category: '',
    tags: []
  });
  const [tagInput, setTagInput] = useState('');
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const [uploadedFiles, setUploadedFiles] = useState<any[]>([]);
  const [isUploading, setIsUploading] = useState(false);

  const validateForm = (): boolean => {
    const newErrors: Partial<SessionFormData> = {};

    if (!formData.title.trim()) {
      newErrors.title = 'Session title is required';
    }

    if (!formData.sessionDate) {
      newErrors.sessionDate = 'Session date is required';
    }

    if (!formData.startTime) {
      newErrors.startTime = 'Start time is required';
    }

    if (!formData.endTime) {
      newErrors.endTime = 'End time is required';
    } else if (formData.startTime && formData.endTime) {
      const start = new Date(`2000-01-01T${formData.startTime}`);
      const end = new Date(`2000-01-01T${formData.endTime}`);
      if (end <= start) {
        newErrors.endTime = 'End time must be after start time';
      }
    }

    if ((formData.meetingType === 'online' || formData.meetingType === 'hybrid') && !formData.meetingLink) {
      newErrors.meetingLink = 'Meeting link is required for online sessions';
    }

    if ((formData.meetingType === 'offline' || formData.meetingType === 'hybrid') && !formData.location) {
      newErrors.location = 'Location is required for in-person sessions';
    }

    if (formData.maxAttendees < 1) {
      newErrors.maxAttendees = 'Maximum attendees must be at least 1';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked;
      setFormData(prev => ({
        ...prev,
        [name]: checked
      }));
    } else if (type === 'number') {
      setFormData(prev => ({
        ...prev,
        [name]: parseInt(value) || 0
      }));
    } else if (type === 'radio' && name === 'meetingType') {
      setFormData(prev => ({
        ...prev,
        meetingType: value as 'online' | 'offline' | 'hybrid'
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }

    // Clear error for this field
    if (errors[name as keyof SessionFormData]) {
      setErrors(prev => ({
        ...prev,
        [name]: undefined
      }));
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    setSelectedFiles(prev => [...prev, ...files]);
  };

  const handleRemoveFile = (index: number) => {
    setSelectedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const uploadFiles = async (): Promise<any[]> => {
    const uploaded = [];
    setIsUploading(true);
    
    for (const file of selectedFiles) {
      try {
      let uploadedFileData = [];
      
      // Upload files if any are selected
      if (selectedFiles.length > 0) {
        uploadedFileData = await uploadFiles();
      }

      const sessionData = {
        title: formData.title,
        description: formData.description,
        sessionDate: formData.sessionDate,
        startTime: formData.startTime,
        endTime: formData.endTime,
        location: formData.location,
        meetingType: formData.meetingType,
        meetingLink: formData.meetingLink,
        maxAttendees: formData.maxAttendees,
        category: formData.category,
        tags: formData.tags,
        facilitatorId: user?.id,
        files: uploadedFileData.map(f => ({
          id: f.id,
          url: f.url,
          filename: f.filename,
          originalName: f.originalName,
          size: f.size,
          mimeType: f.mimeType
        }))
      };

      await sessionService.createSession(sessionData);
      
      Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: 'Session created successfully!',
        confirmButtonColor: theme.colors.primary,
        confirmButtonText: 'Great!'
      });

      onSuccess();
      onClose();

      // Reset form
      setFormData({
        title: '',
        description: '',
        sessionDate: '',
        startTime: '',
        endTime: '',
        location: '',
        meetingType: 'offline',
        meetingLink: '',
        maxAttendees: 50,
        category: '',
        tags: []
      });
      setTagInput('');
      setErrors({});
    } catch (error: any) {
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: error.message || 'Failed to create session',
        confirmButtonColor: theme.colors.primary
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black bg-opacity-80 backdrop-blur-sm" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-2xl transform overflow-hidden rounded-2xl bg-white shadow-2xl transition-all">
                {/* Header with gradient */}
                <div 
                  className="relative p-6 pb-4 flex-shrink-0"
                  style={{
                    background: `linear-gradient(135deg, ${theme.colors.secondary} 0%, ${theme.colors.secondary}dd 100%)`
                  }}
                >
                  <div className="absolute top-0 right-0 w-32 h-32 opacity-10">
                    <CalendarIcon className="w-full h-full" style={{ color: theme.colors.primary }} />
                  </div>
                  
                  <div className="relative flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div 
                        className="p-3 rounded-xl"
                        style={{ backgroundColor: theme.colors.primary + '20' }}
                      >
                        <PlusIcon className="w-6 h-6" style={{ color: theme.colors.primary }} />
                      </div>
                      <div>
                        <h2 className="text-2xl font-bold" style={{ color: theme.colors.primary }}>
                          Create New Session
                        </h2>
                        <p className="text-sm opacity-80" style={{ color: theme.colors.primary }}>
                          Schedule a new session for your team
                        </p>
                      </div>
                    </div>
                    
                    <button
                      onClick={onClose}
                      className="p-2 rounded-lg hover:bg-black hover:bg-opacity-10 transition-colors"
                    >
                      <XMarkIcon className="w-6 h-6" style={{ color: theme.colors.primary }} />
                    </button>
                  </div>
                </div>

                {/* Form Content */}
                <form onSubmit={handleSubmit} className="p-6">
                  <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
                    {/* Session Title */}
                    <div className="sm:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        <DocumentTextIcon className="inline h-5 w-5 mr-1" />
                        Session Title
                      </label>
                      <input
                        type="text"
                        name="title"
                        value={formData.title}
                        onChange={handleChange}
                        className={`block w-full px-3 py-2 border ${errors.title ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-black focus:border-black`}
                        placeholder="Enter session title"
                      />
                      {errors.title && <p className="mt-1 text-sm text-red-600">{errors.title}</p>}
                    </div>

                    {/* Description */}
                    <div className="sm:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Description
                      </label>
                      <textarea
                        name="description"
                        value={formData.description}
                        onChange={handleChange}
                        rows={3}
                        className="block w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-black focus:border-black"
                        placeholder="Describe the session..."
                      />
                    </div>

                    {/* Date and Time */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        <CalendarIcon className="inline h-5 w-5 mr-1" />
                        Date
                      </label>
                      <input
                        type="date"
                        name="sessionDate"
                        value={formData.sessionDate}
                        onChange={handleChange}
                        className={`block w-full px-3 py-2 border ${errors.sessionDate ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-black focus:border-black`}
                      />
                      {errors.sessionDate && <p className="mt-1 text-sm text-red-600">{errors.sessionDate}</p>}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        <ClockIcon className="inline h-5 w-5 mr-1" />
                        Time
                      </label>
                      <div className="grid grid-cols-2 gap-2">
                        <input
                          type="time"
                          name="startTime"
                          value={formData.startTime}
                          onChange={handleChange}
                          className={`block w-full px-3 py-2 border ${errors.startTime ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-black focus:border-black`}
                        />
                        <input
                          type="time"
                          name="endTime"
                          value={formData.endTime}
                          onChange={handleChange}
                          className={`block w-full px-3 py-2 border ${errors.endTime ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-black focus:border-black`}
                        />
                      </div>
                      {(errors.startTime || errors.endTime) && (
                        <p className="mt-1 text-sm text-red-600">{errors.startTime || errors.endTime}</p>
                      )}
                    </div>

                    {/* Meeting Type */}
                    <div className="sm:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Meeting Type
                      </label>
                      <div className="grid grid-cols-3 gap-2">
                        <label className="relative flex items-center justify-center px-4 py-2 border rounded-md cursor-pointer focus:outline-none">
                          <input
                            type="radio"
                            name="meetingType"
                            value="offline"
                            checked={formData.meetingType === 'offline'}
                            onChange={handleChange}
                            className="sr-only"
                          />
                          <div className={`flex items-center space-x-2 ${formData.meetingType === 'offline' ? 'text-[#fddc9a]' : 'text-gray-700'}`}>
                            <BuildingOfficeIcon className="h-5 w-5" />
                            <span>Offline</span>
                          </div>
                          <div className={`absolute inset-0 border-2 rounded-md ${formData.meetingType === 'offline' ? 'border-black bg-black bg-opacity-5' : 'border-gray-300'}`}></div>
                        </label>
                        
                        <label className="relative flex items-center justify-center px-4 py-2 border rounded-md cursor-pointer focus:outline-none">
                          <input
                            type="radio"
                            name="meetingType"
                            value="online"
                            checked={formData.meetingType === 'online'}
                            onChange={handleChange}
                            className="sr-only"
                          />
                          <div className={`flex items-center space-x-2 ${formData.meetingType === 'online' ? 'text-[#fddc9a]' : 'text-gray-700'}`}>
                            <VideoCameraIcon className="h-5 w-5" />
                            <span>Online</span>
                          </div>
                          <div className={`absolute inset-0 border-2 rounded-md ${formData.meetingType === 'online' ? 'border-black bg-black bg-opacity-5' : 'border-gray-300'}`}></div>
                        </label>
                        
                        <label className="relative flex items-center justify-center px-4 py-2 border rounded-md cursor-pointer focus:outline-none">
                          <input
                            type="radio"
                            name="meetingType"
                            value="hybrid"
                            checked={formData.meetingType === 'hybrid'}
                            onChange={handleChange}
                            className="sr-only"
                          />
                          <div className={`flex items-center space-x-2 ${formData.meetingType === 'hybrid' ? 'text-[#fddc9a]' : 'text-gray-700'}`}>
                            <UserGroupIcon className="h-5 w-5" />
                            <span>Hybrid</span>
                          </div>
                          <div className={`absolute inset-0 border-2 rounded-md ${formData.meetingType === 'hybrid' ? 'border-black bg-black bg-opacity-5' : 'border-gray-300'}`}></div>
                        </label>
                      </div>
                    </div>

                    {/* Location (for offline/hybrid) */}
                    {(formData.meetingType === 'offline' || formData.meetingType === 'hybrid') && (
                      <div className="sm:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          <MapPinIcon className="inline h-5 w-5 mr-1" />
                          Location
                        </label>
                        <input
                          type="text"
                          name="location"
                          value={formData.location}
                          onChange={handleChange}
                          className={`block w-full px-3 py-2 border ${errors.location ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-black focus:border-black`}
                          placeholder="Enter location"
                        />
                        {errors.location && <p className="mt-1 text-sm text-red-600">{errors.location}</p>}
                      </div>
                    )}

                    {/* Meeting Link (for online/hybrid) */}
                    {(formData.meetingType === 'online' || formData.meetingType === 'hybrid') && (
                      <div className="sm:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          <LinkIcon className="inline h-5 w-5 mr-1" />
                          Meeting Link
                        </label>
                        <input
                          type="url"
                          name="meetingLink"
                          value={formData.meetingLink}
                          onChange={handleChange}
                          className={`block w-full px-3 py-2 border ${errors.meetingLink ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-black focus:border-black`}
                          placeholder="https://meet.example.com/..."
                        />
                        {errors.meetingLink && <p className="mt-1 text-sm text-red-600">{errors.meetingLink}</p>}
                      </div>
                    )}

                    {/* Max Attendees and Category */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        <UserGroupIcon className="inline h-5 w-5 mr-1" />
                        Max Attendees
                      </label>
                      <input
                        type="number"
                        name="maxAttendees"
                        value={formData.maxAttendees}
                        onChange={handleChange}
                        min="1"
                        className={`block w-full px-3 py-2 border ${errors.maxAttendees ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-black focus:border-black`}
                      />
                      {errors.maxAttendees && <p className="mt-1 text-sm text-red-600">{errors.maxAttendees}</p>}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Category
                      </label>
                      <select
                        name="category"
                        value={formData.category}
                        onChange={handleChange}
                        className="block w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-black focus:border-black"
                      >
                        <option value="">Select a category</option>
                        <option value="meeting">Meeting</option>
                        <option value="workshop">Workshop</option>
                        <option value="training">Training</option>
                        <option value="conference">Conference</option>
                        <option value="social">Social</option>
                        <option value="other">Other</option>
                      </select>
                    </div>

                    {/* Tags */}
                    <div className="sm:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        <TagIcon className="inline h-5 w-5 mr-1" />
                        Tags
                      </label>
                      <div className="space-y-2">
                        <input
                          type="text"
                          value={tagInput}
                          onChange={(e) => setTagInput(e.target.value)}
                          onKeyDown={handleAddTag}
                          placeholder="Type a tag and press Enter"
                          className="block w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-black focus:border-black"
                        />
                        {formData.tags.length > 0 && (
                          <div className="flex flex-wrap gap-2">
                            {formData.tags.map((tag, index) => (
                              <span
                                key={index}
                                className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-[#fddc9a] text-black"
                              >
                                {tag}
                                <button
                                  type="button"
                                  onClick={() => handleRemoveTag(tag)}
                                  className="ml-2 text-black hover:text-gray-700"
                                >
                                  <XMarkIcon className="h-4 w-4" />
                                </button>
                              </span>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  
                    {/* File Attachments */}
                    <div className="sm:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        <PaperClipIcon className="inline h-5 w-5 mr-1" />
                        Attachments
                      </label>
                      <div className="space-y-2">
                        <div className="flex items-center">
                          <label className="relative flex items-center justify-center px-4 py-2 border-2 border-dashed border-gray-300 rounded-md cursor-pointer hover:border-gray-400 transition-colors w-full">
                            <input
                              type="file"
                              multiple
                              onChange={handleFileSelect}
                              className="sr-only"
                              accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.png,.jpg,.jpeg"
                            />
                            <div className="flex items-center space-x-2 text-gray-600">
                              <DocumentIcon className="h-5 w-5" />
                              <span>Click to add files</span>
                            </div>
                          </label>
                        </div>
                        
                        {selectedFiles.length > 0 && (
                          <div className="space-y-2">
                            {selectedFiles.map((file, index) => (
                              <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded-md">
                                <div className="flex items-center space-x-2">
                                  <DocumentIcon className="h-5 w-5 text-gray-400" />
                                  <span className="text-sm text-gray-700">{file.name}</span>
                                  <span className="text-xs text-gray-500">({(file.size / 1024).toFixed(2)} KB)</span>
                                </div>
                                <button
                                  type="button"
                                  onClick={() => handleRemoveFile(index)}
                                  className="text-red-500 hover:text-red-700"
                                >
                                  <XCircleIcon className="h-5 w-5" />
                                </button>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>


                  {/* Action Buttons */}
                  <div className="mt-6 flex flex-col sm:flex-row gap-3">
                    <button
                      type="submit"
                      disabled={loading}
                      className="flex-1 inline-flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-[#fddc9a] bg-black hover:text-black hover:bg-[#fddc9a] transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {loading ? 'Creating...' : 'Create Session'}
                    </button>
                    <button
                      type="button"
                      onClick={onClose}
                      className="flex-1 inline-flex justify-center items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
                    >
                      Cancel
                    </button>
                  </div>
                </form>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  );
};

export default CreateSessionModal;
