import axios from 'axios'
import type { AxiosError, InternalAxiosRequestConfig, AxiosResponse } from 'axios';
import config from '../config';
import { rateLimitedRequest } from '../utils/rateLimiter';
import { setupApiInterceptors } from './api-interceptors';

interface CustomAxiosRequestConfig extends InternalAxiosRequestConfig {
  _retry?: boolean;
}

// Create the base axios instance
const axiosInstance = axios.create({
  baseURL: config.api.baseUrl,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 30000,
});

// Setup API interceptors for monitoring and optimization
setupApiInterceptors(axiosInstance);

// Token management
let accessToken: string | null = localStorage.getItem('accessToken');
let refreshToken: string | null = localStorage.getItem('refreshToken');

// Request interceptor
axiosInstance.interceptors.request.use(
  (config) => {
    if (accessToken) {
      config.headers.Authorization = `Bearer ${accessToken}`;
    }
    console.log('Request:', config.method?.toUpperCase(), config.url);
    return config;
  },
  (error) => {
    console.error('Request error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error: AxiosError) => {
    const originalRequest = error.config as CustomAxiosRequestConfig;
    
    console.log('Response error:', error.response?.status, error.response?.data);
    
    // Handle 401 errors
    if (error.response?.status === 401 && originalRequest && !originalRequest._retry) {
      originalRequest._retry = true;
      
      // Try to refresh the token
      if (refreshToken) {
        try {
          const response = await axios.post(`${config.api.baseUrl}/auth/refresh`, {
            refreshToken
          });
          
          const { token, refreshToken: newRefreshToken } = response.data;
          
          // Update tokens
          setTokens(token, newRefreshToken);
          
          // Update the authorization header
          originalRequest.headers.Authorization = `Bearer ${accessToken}`;
          return axiosInstance(originalRequest);
        } catch (refreshError) {
          console.error('Token refresh failed:', refreshError);
          clearTokens();
          window.location.href = '/login';
          return Promise.reject(refreshError);
        }
      } else {
        clearTokens();
        window.location.href = '/login';
      }
    }
    
    // Don't intercept rate limit errors - let the rate limiter handle them
    if (error.response?.status === 429) {
      return Promise.reject(error);
    }
    
    return Promise.reject(error);
  }
);

// Create a rate-limited wrapper around axios instance
class RateLimitedApi {
  private extractEndpoint(url: string): string {
    // Extract the endpoint path for rate limiting purposes
    try {
      const urlObj = new URL(url, config.api.baseUrl);
      return urlObj.pathname;
    } catch {
      return url;
    }
  }

  async get<T = any>(url: string, config?: any): Promise<AxiosResponse<T>> {
    return rateLimitedRequest(
      () => axiosInstance.get<T>(url, config),
      this.extractEndpoint(url),
      3 // 3 retries
    );
  }

  async post<T = any>(url: string, data?: any, config?: any): Promise<AxiosResponse<T>> {
    return rateLimitedRequest(
      () => axiosInstance.post<T>(url, data, config),
      this.extractEndpoint(url),
      3
    );
  }

  async put<T = any>(url: string, data?: any, config?: any): Promise<AxiosResponse<T>> {
    return rateLimitedRequest(
      () => axiosInstance.put<T>(url, data, config),
      this.extractEndpoint(url),
      3
    );
  }

  async patch<T = any>(url: string, data?: any, config?: any): Promise<AxiosResponse<T>> {
    return rateLimitedRequest(
      () => axiosInstance.patch<T>(url, data, config),
      this.extractEndpoint(url),
      3
    );
  }

  async delete<T = any>(url: string, config?: any): Promise<AxiosResponse<T>> {
    return rateLimitedRequest(
      () => axiosInstance.delete<T>(url, config),
      this.extractEndpoint(url),
      3
    );
  }
}

// Create the rate-limited API instance
const api = new RateLimitedApi();

// Token management functions
export const setTokens = (access: string, refresh: string) => {
  accessToken = access;
  refreshToken = refresh;
  localStorage.setItem('accessToken', access);
  localStorage.setItem('refreshToken', refresh);
};

export const clearTokens = () => {
  accessToken = null;
  refreshToken = null;
  localStorage.removeItem('accessToken');
  localStorage.removeItem('refreshToken');
};

export const getAccessToken = () => accessToken;
export const getRefreshToken = () => refreshToken;

// Export both the rate-limited API and the raw axios instance (for special cases)
export default api;
export { axiosInstance };
